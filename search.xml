<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git升级到最新版本</title>
    <url>/posts/15d0aa15/</url>
    <content><![CDATA[<h4 id="Windows下的升级方法"><a href="#Windows下的升级方法" class="headerlink" title="Windows下的升级方法"></a>Windows下的升级方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-git-for-windows</span><br></pre></td></tr></table></figure>

<h4 id="Linux下升级方法"><a href="#Linux下升级方法" class="headerlink" title="Linux下升级方法"></a>Linux下升级方法</h4><ul>
<li><p>首先查看一下自己的版本是不是低于最新版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不是最新版，则添加Git官方的软件源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:git-core/ppa</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着更新一下软件列表，就可以直接升级安装了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -f</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>conda的常用指令</title>
    <url>/posts/9bb6c8d3/</url>
    <content><![CDATA[<h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n env_name python=3.8   <span class="comment"># 创建虚拟环境</span></span><br><span class="line">conda create -n env_name package python=3.8  <span class="comment"># 创建虚拟环境的同时安装必要的包</span></span><br><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line">conda info -e</span><br><span class="line">conda info --envs                     <span class="comment"># 查看有哪些虚拟环境</span></span><br><span class="line">conda activate env_name               <span class="comment"># 激活虚拟环境</span></span><br><span class="line">conda deactivate                      <span class="comment"># 退出虚拟环境</span></span><br><span class="line">conda remove --name env_name --all    <span class="comment"># 删除虚拟环境</span></span><br><span class="line">conda remove --name env_name package  <span class="comment"># 只删除虚拟环境中的某个或者某些包</span></span><br><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> --name <span class="built_in">env</span> &gt; env.yml <span class="comment"># 获得环境中的所有配置</span></span><br><span class="line">conda <span class="built_in">env</span> create -f  env.yml          <span class="comment"># 重新还原环境</span></span><br></pre></td></tr></table></figure>
<h4 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda list                            <span class="comment"># 查询看当前环境中安装了哪些包</span></span><br><span class="line">conda search package                  <span class="comment"># 查询当前Anaconda repository中是否有你想要安装的包</span></span><br><span class="line">conda list package                    <span class="comment"># 查询是否有安装某个包</span></span><br><span class="line">conda list package*                   <span class="comment"># *通配模糊查找</span></span><br><span class="line">conda install package                 <span class="comment"># 安装包</span></span><br><span class="line">conda install package=version         <span class="comment"># 安装某个特定版本的包</span></span><br><span class="line">conda update package                  <span class="comment"># 将某个包更新到它的最新版本</span></span><br><span class="line">conda uninstall package_name          <span class="comment"># conda卸载包</span></span><br><span class="line">conda clean -p                        <span class="comment"># 删除没有用的包 --packages</span></span><br><span class="line">conda clean -t                        <span class="comment"># 删除tar打包 --tarballs</span></span><br><span class="line">conda clean -y -all                   <span class="comment"># 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包)</span></span><br></pre></td></tr></table></figure>
<h4 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda --version                 <span class="comment"># 查看conda版本</span></span><br><span class="line">conda config --show             <span class="comment"># 查看conda的环境配置</span></span><br><span class="line">conda update conda              <span class="comment"># 检查更新conda</span></span><br><span class="line">conda install conda==version    <span class="comment"># 更新指定版本conda</span></span><br><span class="line">conda update Anaconda           <span class="comment"># 更新Anaconda</span></span><br><span class="line">conda update Anaconda-naviator  <span class="comment"># 更新navigator</span></span><br></pre></td></tr></table></figure>
<h4 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置清华镜像</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line"><span class="comment"># 设置bioconda</span></span><br><span class="line">conda config --add channels bioconda</span><br><span class="line">conda config --add channels conda-forge</span><br><span class="line"><span class="comment"># 设置搜索时显示通道地址</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">Anaconda 镜像使用帮助</a></p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ul>
<li>注意：不建议conda和pip混用</li>
<li>参考：<a href="https://blog.csdn.net/chenxy_bwave/article/details/119996001">Anaconda conda常用命令：从入门到精通</a></li>
<li>我的.condarc配置文件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/</span><br></pre></td></tr></table></figure>
如果没有.condarc文件，在Anaconda Prompt中键入以下命令行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
会自动在当前用户文件夹下生成.condarc文件</li>
</ul>
]]></content>
      <categories>
        <category>conda</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中的主键</title>
    <url>/posts/d8f53a2/</url>
    <content><![CDATA[<h4 id="创建表时设置主键"><a href="#创建表时设置主键" class="headerlink" title="创建表时设置主键"></a>创建表时设置主键</h4><p>在创建表时设置主键：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    user_id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (user_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="向表中添加主键"><a href="#向表中添加主键" class="headerlink" title="向表中添加主键"></a>向表中添加主键</h4><p>在已经存在的表中添加主键：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (user_id);</span><br></pre></td></tr></table></figure>
<h4 id="查看主键"><a href="#查看主键" class="headerlink" title="查看主键"></a>查看主键</h4><p>在MySQL中，可以使用 SHOW KEYS 命令来查看主键信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> KEYS <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> Key_name <span class="operator">=</span> <span class="string">&#x27;PRIMARY&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>或者使用 INFORMATION_SCHEMA 库查询主键：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span> <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span> <span class="keyword">AND</span> COLUMN_KEY <span class="operator">=</span> <span class="string">&#x27;PRI&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>唯一性：主键列必须包含唯一值。主键不能包含重复的值。</li>
<li>非空：主键列不能包含NULL值。创建主键时会自动设置列为NOT NULL。</li>
<li>自增（可选）：在某些数据库（如MySQL）中，主键可以设置为自增，这样在插入新行时会自动生成一个唯一的值。</li>
<li>复合主键：有时你可能需要设置多个列作为主键，这叫做复合主键。例如<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> enrollment (</span><br><span class="line">    student_id <span class="type">INT</span>,</span><br><span class="line">    course_id <span class="type">INT</span>,</span><br><span class="line">    enrollment_date <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (student_id, course_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
以上例子中，student_id 和 course_id 组合在一起作为主键。</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git取消与远程仓库的连接</title>
    <url>/posts/125274a0/</url>
    <content><![CDATA[<h4 id="git取消与远程仓库的连接"><a href="#git取消与远程仓库的连接" class="headerlink" title="git取消与远程仓库的连接"></a>git取消与远程仓库的连接</h4><h5 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>
<h5 id="查看远程连接"><a href="#查看远程连接" class="headerlink" title="查看远程连接"></a>查看远程连接</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h5 id="git取消与远程仓库的连接-1"><a href="#git取消与远程仓库的连接-1" class="headerlink" title="git取消与远程仓库的连接"></a>git取消与远程仓库的连接</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>
<h4 id="安全删除Git仓库中的-git文件夹"><a href="#安全删除Git仓库中的-git文件夹" class="headerlink" title="安全删除Git仓库中的.git文件夹"></a>安全删除Git仓库中的.git文件夹</h4><h5 id="备份项目数据"><a href="#备份项目数据" class="headerlink" title="备份项目数据"></a>备份项目数据</h5><p>在删除<code>.git</code>文件夹之前，始终首先备份整个项目。这确保了在出现意外情况时，项目仍然拥有完整的本。可以选择将整个目录压缩为ZIP文件或复制到其他位置作为备份。</p>
<h5 id="确保工作目录是干净的"><a href="#确保工作目录是干净的" class="headerlink" title="确保工作目录是干净的"></a>确保工作目录是干净的</h5><p>在删除前，确保工作目录中没有挂起的更改。可以使用<code>git status</code>命令来检查。这确保不会失去任何未提交的工作。</p>
<h5 id="直接删除-git文件夹"><a href="#直接删除-git文件夹" class="headerlink" title="直接删除.git文件夹"></a>直接删除.git文件夹</h5><p>进入项目的根目录，然后删除<code>.git</code>文件夹。在命令行中，可以使用<code>rm -rf .git</code>（Linux或Mac）或<code>rmdir /s /q .git</code>（Windows）来完成。</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>在删除<code>.git</code>文件夹后，所有以前的提交历史和版本控制信息都将丢失。确保始终保持备份。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>npm的常用指令</title>
    <url>/posts/98bd404c/</url>
    <content><![CDATA[<h4 id="设置npm路径"><a href="#设置npm路径" class="headerlink" title="设置npm路径"></a>设置npm路径</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局安装路径</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Program Files\nodejs\node_global&quot;</span></span><br><span class="line"><span class="comment">#缓存路径</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Program Files\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h4><p>见<a href="https://be11amy.github.io/posts/3f8cf88c/">使用xmzs包管理npm源</a></p>
<h4 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init          <span class="comment"># npm 初始化当前目录</span></span><br><span class="line">npm i             <span class="comment"># 安装所有依赖</span></span><br><span class="line">npm install       <span class="comment"># 安装所有依赖</span></span><br><span class="line">npm i package     <span class="comment"># 安装模块到默认dependencies</span></span><br><span class="line">npm i package -g  <span class="comment"># 会安装到配置的全局目录下</span></span><br><span class="line">npm i package -S  <span class="comment"># 安装包信息将加入到dependencies生产依赖</span></span><br><span class="line">npm i package -D  <span class="comment"># 安装包信息将加入到devDependencies开发依赖</span></span><br><span class="line">npm uninstall package             <span class="comment"># 卸载模块，但不卸载模块留在package.json中的对应信息</span></span><br><span class="line">npm uninstall package -g          <span class="comment"># 卸载全局模块</span></span><br><span class="line">npm uninstall package --save      <span class="comment"># 卸载模块，同时卸载留在package.json中dependencies下的信息</span></span><br><span class="line">npm uninstall package --save-dev  <span class="comment"># 卸载模块，同时卸载留在package.json中devDependencies下的信息</span></span><br><span class="line">npm update package          <span class="comment"># 更新最新版本的包</span></span><br><span class="line">npm update package@version  <span class="comment"># 更新到指定版本号的包</span></span><br><span class="line">npm update package@latest   <span class="comment"># 更新到最后的新版本</span></span><br></pre></td></tr></table></figure>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v                          <span class="comment">#查看版本号</span></span><br><span class="line">npm root                        <span class="comment"># 查看项目中模块所在的目录</span></span><br><span class="line">npm root -g                     <span class="comment"># 查看全局安装的模块所在目录</span></span><br><span class="line">npm list 或者 npm <span class="built_in">ls</span>             <span class="comment"># 查看本地已安装模块的清单列表</span></span><br><span class="line">npm view package dependencies   <span class="comment"># 查看某个包对于各种包的依赖关系</span></span><br><span class="line">npm view package version        <span class="comment"># 查看包最新的版本号</span></span><br><span class="line">npm view package versions       <span class="comment"># 查看所有包历史版本号（很实用）</span></span><br><span class="line">npm view package                <span class="comment"># 查看最新的包版本的信息</span></span><br><span class="line">npm info package                <span class="comment"># 查看包的详细信息，等同于上面的npm view package</span></span><br><span class="line">npm list package 或 npm <span class="built_in">ls</span> package  <span class="comment"># 查看本地已安装的express的详细信息</span></span><br><span class="line">npm view package repository.url     <span class="comment"># 查看express包的来源地址</span></span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm cache clean           <span class="comment"># 清除npm的缓存</span></span><br><span class="line">npm prune                 <span class="comment"># 清除项目中没有被使用的包</span></span><br><span class="line">npm outdated              <span class="comment"># 检查模块是否已经过时</span></span><br><span class="line">npm repo package          <span class="comment"># 会打开默认浏览器跳转到github中package的页面</span></span><br><span class="line">npm docs package          <span class="comment"># 会打开默认浏览器跳转到github中package的README.MD文件信息</span></span><br><span class="line">npm home package          <span class="comment"># 会打开默认浏览器跳转到github中package的主页</span></span><br><span class="line">npm install -g npm        <span class="comment"># 升级npm</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/penngo/article/details/127845211">npm常用命令大全</a></p>
]]></content>
      <categories>
        <category>包管理工具</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn的常用指令</title>
    <url>/posts/88a8fad8/</url>
    <content><![CDATA[<h4 id="yarn常用指令"><a href="#yarn常用指令" class="headerlink" title="yarn常用指令"></a>yarn常用指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn --version      // 查看版本</span><br><span class="line">yarn init           // 同npm init，执行输入信息后，会生成package.json文件</span><br><span class="line">yarn config list    // 显示所有配置项</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="yarn的配置项"><a href="#yarn的配置项" class="headerlink" title="yarn的配置项"></a>yarn的配置项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config get &lt;key&gt;     <span class="comment"># 显示某配置项</span></span><br><span class="line">yarn config delete &lt;key&gt;  <span class="comment"># 删除某配置项</span></span><br><span class="line">yarn config <span class="built_in">set</span> &lt;key&gt; &lt;value&gt; [-g| --global]  <span class="comment"># 设置配置项</span></span><br></pre></td></tr></table></figure>
<h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install                  <span class="comment"># 安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</span></span><br><span class="line">yarn install --flat           <span class="comment"># 安装一个包的单一版本</span></span><br><span class="line">yarn install --force          <span class="comment"># 强制重新下载所有包</span></span><br><span class="line">yarn install --production     <span class="comment"># 只安装dependencies里的包</span></span><br><span class="line">yarn install --no-lockfile    <span class="comment"># 不读取或生成yarn.lock</span></span><br><span class="line">yarn install --pure-lockfile  <span class="comment"># 不生成yarn.lock</span></span><br></pre></td></tr></table></figure>
<h4 id="更改包（会更新package-json和yarn-lock）"><a href="#更改包（会更新package-json和yarn-lock）" class="headerlink" title="更改包（会更新package.json和yarn.lock）"></a>更改包（会更新package.json和yarn.lock）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package]            <span class="comment"># 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中</span></span><br><span class="line">yarn add [package]@[version]  <span class="comment"># 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数</span></span><br><span class="line">yarn add [package]@[tag]      <span class="comment"># 安装某个tag（比如beta,next或者latest）</span></span><br><span class="line">yarn add --dev/-D             <span class="comment"># 加到 devDependencies</span></span><br><span class="line">yarn add --peer/-P            <span class="comment"># 加到 peerDependencies</span></span><br><span class="line">yarn add --optional/-O        <span class="comment"># 加到 optionalDependencies</span></span><br><span class="line">yarn remove &lt;packageName&gt;     <span class="comment"># 移除一个包，会自动更新package.json和yarn.lock</span></span><br><span class="line">yarn upgrade                  <span class="comment"># 用于更新包到基于规范范围的最新版本</span></span><br></pre></td></tr></table></figure>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn cache list       <span class="comment"># 列出已缓存的每个包</span></span><br><span class="line">yarn cache <span class="built_in">dir</span>        <span class="comment"># 返回 全局缓存位置</span></span><br><span class="line">yarn cache clean      <span class="comment"># 清除缓存</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/yw00yw/article/details/81354533">yarn的安装和使用</a></p>
]]></content>
      <categories>
        <category>包管理工具</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nvm管理node.js</title>
    <url>/posts/c89d12c6/</url>
    <content><![CDATA[<h4 id="nvm常用命令"><a href="#nvm常用命令" class="headerlink" title="nvm常用命令"></a>nvm常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm v                               // 显示nvm版本</span><br><span class="line">nvm <span class="built_in">ls</span>                              // 显示所有安装的node.js版本</span><br><span class="line">nvm use &lt;version&gt;                   // 切换到使用指定的nodejs版本</span><br><span class="line">nvm list available                  // 显示可以安装的所有node.js的版本</span><br><span class="line">nvm install &lt;version&gt;               // 安装node.js的命名 version是版本号 例如：nvm install 8.12.0</span><br><span class="line">nvm uninstall &lt;version&gt;             // 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用</span><br><span class="line">nvm install stable                  // 安装最新稳定版</span><br><span class="line">nvm reinstall-packages &lt;version&gt;    // 重新安装指定版本的Node.js，并将全局包重新安装到新版本中</span><br><span class="line">nvm off                             // 禁用node.js版本管理(不卸载任何东西)</span><br><span class="line">nvm on                              // 启用node.js版本管理</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>pnpm的常用指令</title>
    <url>/posts/5d60e758/</url>
    <content><![CDATA[<h4 id="pnpm常用指令"><a href="#pnpm常用指令" class="headerlink" title="pnpm常用指令"></a>pnpm常用指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm -v                       // 查看已安装的pnpm的版本</span><br><span class="line">pnpm install xxx/pnpm i xxx   // 安装依赖</span><br><span class="line">pnpm add &lt;package&gt;            // 安装依赖包到 dependencies</span><br><span class="line">pnpm add -D xxx               // 安装依赖包到devDependencies</span><br><span class="line">pnpm update xxx/pnpm up xxx   // 更新依赖包</span><br><span class="line">pnpm remove xxx               // 删除依赖包</span><br><span class="line">pnpm run xxx                  // 运行package.json中scripts脚本</span><br></pre></td></tr></table></figure>
<h4 id="pnpm显示"><a href="#pnpm显示" class="headerlink" title="pnpm显示"></a>pnpm显示</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm list      // 以树形结构输出已安装的软件包的所有版本及其依赖</span><br></pre></td></tr></table></figure>
<p>选项：<br><code>--global, -g</code>：列出全局安装目录中的包，而不是当前项目中的包<br><code>--depth &lt;number&gt;</code>：依赖树的最大显示深度<br><code>--json</code>：JSON 格式的日志输出<br><code>--dev, -D</code>：仅显示 devDependencies 中包的依赖图<br>参考：<a href="https://juejin.cn/post/7143215573378269198">快速掌握pnpm使用命令和实现原理</a></p>
]]></content>
      <categories>
        <category>包管理工具</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>pnpm</tag>
      </tags>
  </entry>
  <entry>
    <title>pnpm的安装与配置</title>
    <url>/posts/456ef5aa/</url>
    <content><![CDATA[<h4 id="pnpm的安装"><a href="#pnpm的安装" class="headerlink" title="pnpm的安装"></a>pnpm的安装</h4><p>通过npm全局安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure>
<p>获取当前配置的镜像地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm get registry</span><br></pre></td></tr></table></figure>
<p>(可选)修改默认安装包的仓库位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config <span class="built_in">set</span> store-dir <span class="string">&quot;D:\CodeApps\nvs\pnpm\pnpm-store&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看默认安装包的仓库位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config get store-dir </span><br></pre></td></tr></table></figure>
<h4 id="配置PNPM环境变量"><a href="#配置PNPM环境变量" class="headerlink" title="配置PNPM环境变量"></a>配置PNPM环境变量</h4><p>举例，在系统PATH中配置环境变量<br><code>NAME</code>:<code>PNPM_HOME</code><br><code>VALUE</code>:<code>D:\CodeApps\nvs\pnpm</code><br>再在<code>Path</code>中添加<code>%PNPM_HOME%</code></p>
<h4 id="pnpm全局包安装路径"><a href="#pnpm全局包安装路径" class="headerlink" title="pnpm全局包安装路径"></a>pnpm全局包安装路径</h4><p>查看pnpm全局包安装路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config get store-dir</span><br></pre></td></tr></table></figure>
<p>配置pnpm全局包安装路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config <span class="built_in">set</span> store-dir <span class="string">&quot;D:\CodeApps\node version manager\.pnpm-store&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="pnpm全局缓存路径"><a href="#pnpm全局缓存路径" class="headerlink" title="pnpm全局缓存路径"></a>pnpm全局缓存路径</h4><p>查看pnpm全局包缓存路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config get cache-dir</span><br></pre></td></tr></table></figure>
<p>配置pnpm全局包缓存路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config <span class="built_in">set</span> cache-dir <span class="string">&quot;D:\CodeApps\node version manager\nodejs\pnpm-cache&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>运行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm config list</span><br></pre></td></tr></table></figure>
<p>得到如下路径</p>
<blockquote>
<p>cache&#x3D;D:\CodeApps\node version manager\nodejs\node_cache</p>
<p>cache-dir&#x3D;D:\CodeApps\node version manager\nodejs\pnpm-cache</p>
<p>global-bin-dir&#x3D;D:\CodeApps\node version manager\nodejs</p>
<p>global-dir&#x3D;D:\CodeApps\node version manager\nodejs\pnpm-global</p>
<p>home&#x3D;<a href="https://npmmirror.com/">https://npmmirror.com</a></p>
<p>prefix&#x3D;D:\CodeApps\node version manager\nodejs\node_global    </p>
<p>registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com/</a></p>
<p>state-dir&#x3D;D:\CodeApps\node version manager\nodejs\pnpm-state</p>
<p>store-dir&#x3D;D:\CodeApps\node version manager.pnpm-store</p>
<p>user-agent&#x3D;pnpm&#x2F;9.1.2 npm&#x2F;? node&#x2F;v20.13.1 win32 x64<br>参考：<br><a href="https://blog.csdn.net/qq_27971677/article/details/130652057">pnpm的使用</a><br><a href="https://blog.csdn.net/m0_56416743/article/details/136122153">pnpm 基本详细使用教程（安装、卸载、使用、可能遇到的问题及解决办法）</a><br><a href="https://blog.csdn.net/weixin_46243213/article/details/133384481?ops_request_misc=&request_id=&biz_id=102&utm_term=npm%20cache-dir&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-133384481.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">node、npm、pnpm下载安装、卸载、踩坑</a></p>
</blockquote>
]]></content>
      <categories>
        <category>包管理工具</category>
      </categories>
      <tags>
        <tag>pnpm</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>使用rimfaf删除依赖</title>
    <url>/posts/ec5cb3a2/</url>
    <content><![CDATA[<h4 id="安装rimraf"><a href="#安装rimraf" class="headerlink" title="安装rimraf"></a>安装rimraf</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install rimraf -g</span><br></pre></td></tr></table></figure>
<h4 id="使用rimraf-进行删除"><a href="#使用rimraf-进行删除" class="headerlink" title="使用rimraf 进行删除"></a>使用rimraf 进行删除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rimraf node_modules</span><br></pre></td></tr></table></figure>
<p>如果安装依赖时报错，可以先删除依赖，然后清理缓存，最后再安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rimraf node_modules</span><br><span class="line">npm cache clean --force</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用xmzs包管理npm源</title>
    <url>/posts/3f8cf88c/</url>
    <content><![CDATA[<h4 id="xmzs的安装"><a href="#xmzs的安装" class="headerlink" title="xmzs的安装"></a>xmzs的安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install xmzs -g</span><br></pre></td></tr></table></figure>
<h4 id="mmp命令"><a href="#mmp命令" class="headerlink" title="mmp命令"></a>mmp命令</h4><p>通过以下命令查看可用的npm源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mmp <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>通过以下命令更改npm源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mmp use</span><br></pre></td></tr></table></figure>
<h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p>使用以下命令获取帮助</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mmp -h</span><br><span class="line">mmp <span class="built_in">help</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>元组和numpy数组的关系</title>
    <url>/posts/b7ef5578/</url>
    <content><![CDATA[<h4 id="什么是numpy数组"><a href="#什么是numpy数组" class="headerlink" title="什么是numpy数组"></a>什么是numpy数组</h4><p>定义：NumPy 数组是用于存储同类型数据的多维集合，它提供了丰富的操作和数学函数来处理这些数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>])  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出[2 3 4]</span></span><br></pre></td></tr></table></figure>
<h4 id="什么是元组"><a href="#什么是元组" class="headerlink" title="什么是元组"></a>什么是元组</h4><p>定义：Python 的内置数据类型，用于存储不可变的有序元素集合。</p>
<h4 id="二者的关系"><a href="#二者的关系" class="headerlink" title="二者的关系"></a>二者的关系</h4><p>在以下代码中，可以看出它们存在的其中一种关系：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从数据集中提取特征和标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_features_and_labels</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    data (pd.DataFrame): 输入数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    tuple: 包含特征和标签的元组 (features, labels)。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 检查所需列是否存在</span></span><br><span class="line">    required_features = [<span class="string">&quot;AC&quot;</span>, <span class="string">&quot;CAL&quot;</span>, <span class="string">&quot;GR&quot;</span>, <span class="string">&quot;RT&quot;</span>, <span class="string">&quot;RXO&quot;</span>]</span><br><span class="line">    required_label = [<span class="string">&quot;CNL&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取特征</span></span><br><span class="line">    features = data[required_features].values</span><br><span class="line">    <span class="comment"># 提取标签</span></span><br><span class="line">    labels = data[required_label].values</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line"><span class="comment"># data = pd.read_csv(&#x27;your_data.csv&#x27;)  # 假设你已经读取了数据</span></span><br><span class="line"><span class="comment"># features, labels = get_features_and_labels(data)</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>get_features_and_labels()</code>方法返回了features和labels，这两者分别都是numpy数组，而两者结合就构成了一个元组。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>如何对数据的某列取对数</title>
    <url>/posts/4f2cf0a6/</url>
    <content><![CDATA[<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>首先，处理数据之前要清除数据的类型，以测井曲线的代码片段为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_transform_columns</span>(<span class="params">data, cols_indices</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对指定列进行对数变换。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    data (np.ndarray): 输入数据，numpy数组。</span></span><br><span class="line"><span class="string">    cols_indices (list of int): 需要进行对数变换的列索引列表。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    np.ndarray: 经过对数变换处理后的数据。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data_copy = data.copy() <span class="comment"># 避免对原始数据进行修改</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> col_idx <span class="keyword">in</span> cols_indices:</span><br><span class="line">        <span class="comment"># 确保列中的所有值都大于0，避免对数变换出现负无穷大的问题</span></span><br><span class="line">        data_copy[:, col_idx] = np.where(data_copy[:, col_idx] &lt;= <span class="number">0</span>, <span class="number">1e-9</span>, data_copy[:, col_idx])</span><br><span class="line">        data_copy[:, col_idx] = np.log10(data_copy[:, col_idx].astype(<span class="built_in">float</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data_copy</span><br></pre></td></tr></table></figure>
<p>这个函数输入的数据类型是numpy数组，输出也是numpy数组，而<code>np.log10()</code>函数也是numpy自带的处理方法，所以这个方法对于numpy数组取对数很方便，但是有时输入数据并不是numpy数组，也有可能是pandas DataFrame类型，这时候又有另一种方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_transform_columns</span>(<span class="params">data, cols</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对指定列进行对数变换。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    data (pd.DataFrame): 输入数据。</span></span><br><span class="line"><span class="string">    cols (list of str): 需要进行对数变换的列名列表。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    pd.DataFrame: 经过对数变换处理后的数据。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data_copy = data.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">        <span class="comment"># 确保列中的所有值都大于0，避免对数变换出现负无穷大的问题</span></span><br><span class="line">        data_copy[col] = np.where(data_copy[col] &lt;= <span class="number">0</span>, <span class="number">1e-9</span>, data_copy[col])</span><br><span class="line">        <span class="comment"># 对列进行log10变换</span></span><br><span class="line">        data_copy[col] = np.log10(data_copy[col].astype(<span class="built_in">float</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data_copy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建Springboot项目</title>
    <url>/posts/1890d97b/</url>
    <content><![CDATA[<p>本文以InrelliJ IDEA为例创建Springboot项目</p>
<h4 id="更改Server-URL"><a href="#更改Server-URL" class="headerlink" title="更改Server URL"></a>更改Server URL</h4><ul>
<li>将Server URL更改为<code>https://start.aliyun.com/</code></li>
<li>Language选择<code>Java</code></li>
<li>Type选择<code>Maven</code></li>
<li>JDK版本与Java版本匹配</li>
</ul>
<h4 id="依赖选择"><a href="#依赖选择" class="headerlink" title="依赖选择"></a>依赖选择</h4><ul>
<li>Developer选择<code>Lombok</code></li>
<li>Web选择Spring Web</li>
<li>SQL选择MySQL Driver<br>注意：如果使用MybatisPlus则不选择<code>Mybatis Framework</code></li>
<li>进入<a href="https://baomidou.com/getting-started/">Mybatisplus官网找到最新版的Maven依赖</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="配置pom"><a href="#配置pom" class="headerlink" title="配置pom"></a>配置pom</h4><p>在<code>pom.xml</code>中的第一个dependencie中加入上文提到的MybatisPlus的dependency配置<br>若遇到<code>Unresolved plugin</code>的问题，可以再加入以下dependency配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后等待Maven进行同步，当Maven同步显示成功时可选择删除以上代码<br>参考：<a href="https://blog.csdn.net/biaoguaqie7838/article/details/106179663">解决：Unresolved plugin: org.apache.maven.plugins:maven-jar-plugin:2.4 等四个插件的问题</a></p>
<h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>在<code>src/main/resource/application.yml</code>配置如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/*?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>查看<code>src/main/java/../DemoApplication</code><br>点击<code>public class DemoApplication</code>旁的绿色箭头即可运行程序</p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>如何开始编写TypeScript</title>
    <url>/posts/2cdbb915/</url>
    <content><![CDATA[<h4 id="安装TypeScripit"><a href="#安装TypeScripit" class="headerlink" title="安装TypeScripit"></a>安装TypeScripit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install -g typescript</span><br></pre></td></tr></table></figure>
<p>使用以下命令行验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure>
<h4 id="运行TypeScript"><a href="#运行TypeScript" class="headerlink" title="运行TypeScript"></a>运行TypeScript</h4><p>首先初始化，生成<code>tsconfig.json</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>
<ul>
<li>由于ts文件本身无法直接运行，所以需要先编译为js文件</li>
<li>创建<code>&lt;filename&gt;.ts</code>文件，使用以下命令行生成随<code>&lt;filename&gt;.ts</code>文件改变而改变的<code>&lt;filename&gt;.js</code>文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc -w</span><br></pre></td></tr></table></figure>
终端输出如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[10:49:49] Starting compilation in watch mode...</span><br><span class="line">[10:49:50] Found 0 errors. Watching for file changes.</span><br></pre></td></tr></table></figure></li>
<li>在<code>.js</code>文件所在文件夹下使用以下命令运行<code>node &lt;filename&gt;.js</code></li>
<li>可以安装<code>nodemon</code>同时监听<code>.js</code>文件，这样就不用反复使用<code>node &lt;filename&gt;.js</code>命令运行<code>.js</code>文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm i -g nodemon</span><br></pre></td></tr></table></figure>
运行<code>.js</code>文件时不要关闭<code>tsc</code>的终端，同时再打开一个新的终端，使用<code>nodemon &lt;filename&gt;.js</code>运行<code>js</code>文件，运行时保持两个终端的运行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodemon &lt;filename&gt;.js</span><br></pre></td></tr></table></figure>
终端输出如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[nodemon] 3.1.1</span><br><span class="line">[nodemon] to restart at any time, enter `rs`  </span><br><span class="line">[nodemon] watching path(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,cjs,json</span><br><span class="line">[nodemon] starting `node index.js`</span><br><span class="line">[nodemon] clean exit - waiting for changes before restart</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="使用ts-node运行ts文件"><a href="#使用ts-node运行ts文件" class="headerlink" title="使用ts-node运行ts文件"></a>使用ts-node运行ts文件</h4><p>使用pnpm安装ts-node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm i -g ts-node</span><br></pre></td></tr></table></figure>
<p>使用<code>ts-node &lt;filename&gt;.ts</code>可以直接运行ts文件</p>
<h4 id="使用-types-x2F-node提供类型检查"><a href="#使用-types-x2F-node提供类型检查" class="headerlink" title="使用@types&#x2F;node提供类型检查"></a>使用@types&#x2F;node提供类型检查</h4><p>TypeScript编译器将能够识别并使用@types&#x2F;node中提供的类型定义文件，从而为Node.js的API提供类型检查和代码补全功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm i @types/node -D</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建Vite+Vue项目</title>
    <url>/posts/a63b7ddc/</url>
    <content><![CDATA[<h4 id="安装pnpm"><a href="#安装pnpm" class="headerlink" title="安装pnpm"></a>安装pnpm</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure>
<p>验证<code>pnpm -v</code></p>
<h4 id="使用Vite自带命令行"><a href="#使用Vite自带命令行" class="headerlink" title="使用Vite自带命令行"></a>使用Vite自带命令行</h4><p>使用如下命令，按照提示操作即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></table></figure>
<p>接下来，安装所需包以及运行项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install</span><br><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure>
<p>即可打开默认Vite+Vue界面</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>Vite运行时默认不自动打开浏览器，可以找到项目根目录下的<code>package.json</code>文件修改<code>script</code>中的<code>&quot;dev&quot;: &quot;vite&quot;</code>更改为<code>&quot;dev&quot;: &quot;vite --open&quot;</code>，更改后项目启动自动打开浏览器。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://cn.vitejs.dev/guide/">Vite官网中文文档</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vite</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>解决pnpm(ERR_PNPM_META_FETCH_FAIL)异常</title>
    <url>/posts/9f72484f/</url>
    <content><![CDATA[<h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h4><p>运行pnpm命令下的vite创建vue命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure>
<p>错误信息如下所示，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARN  GET https://registry.npmmirror.com/create-vite error (ERR_INVALID_THIS). Will retry in 10 seconds. 2 retries left.</span><br><span class="line"> WARN  GET https://registry.npmmirror.com/create-vite error (ERR_INVALID_THIS). Will retry in 1 minute. 1 retries left.</span><br><span class="line">D:\CodeApps\nvs\pnpm\pnpm-store\v3\tmp\dlx-61520:</span><br><span class="line"> ERR_PNPM_META_FETCH_FAIL  GET https://registry.npmmirror.com/create-vite: Value of &quot;this&quot; must be of type URLSearchParams</span><br><span class="line"></span><br><span class="line">This error happened while installing a direct dependency of D:\CodeApps\nvs\pnpm\pnpm-store\v3\tmp\dlx-61520</span><br></pre></td></tr></table></figure>

<h4 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h4><p>参考：<a href="https://www.wyr.me/post/746">解决pnpm (ERR_INVALID_THIS)异常 Node.js 20</a> <a href="https://www.wyr.me/">作者:轶哥</a></p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>重装pnpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall -g pnpm</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>pnpm</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 的常用指令</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<h4 id="写作命令"><a href="#写作命令" class="headerlink" title="写作命令"></a>写作命令</h4><p><code>hexo new page &quot;pageName&quot;</code> 新建分页<br><code>hexo new &quot;postName&quot;</code> 新建文章<br><code>hexo new draft &quot;draftName&quot;</code> 新建草稿<br><code>hexo publish &quot;postName&quot;</code> 草稿生成文章<br><code>hexo publish page &quot;pageName</code> 草稿生成分页</p>
<h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p><code>hexo clean</code> 清除缓存文件 (db.json) 和已生成的静态文件 (public)<br><code>hexo genarate</code> 生成静态页面至 public 目录<br><code>hexo server</code> 开启预览访问端口<br><code>hexo server --drafts</code> 预览草稿<br><code>hexo deploy</code> 部署到 GitHub<br><code>hexo help</code> 查看帮助<br><code>hexo version</code> 查看 Hexo 的版本</p>
<h4 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h4><p><code>hexo new == hexo n</code><br><code>hexo genarate == hexo g</code><br><code>hexo server == hexo s</code><br><code>hexo deploy == hexo d</code></p>
<h4 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h4><p><code>hexo s -g</code> 生成并本地预览<br><code>hexo d -g</code> 生成并上传</p>
<h4 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h4><ul>
<li>当修改了配置、更新了博文 或是更改了其它信息，<code>hexo g</code> 将根据更改生成新的网页，通过 <code>hexo s</code> 可以在本地 <code>localhost:4000</code> 端口检验网页是否与预期一致，若确认无误则可部署到远端，在部署前以防旧的网页与新生成的网页冲突先清除缓存 <code>hexo clean</code>，然后 <code>hexo d</code> 部署即可。</li>
<li>值得注意的是，并不是每次更改了本地信息就需要关闭当前 4000 端口然后重新 <code>hexo g</code> 和 <code>hexo s</code> 查看更改，事实上除了修改站点配置文件 <code>\_config.yml</code> 外其它时候都可以实时更新到当前监听的端口。</li>
<li>所以建议让本地 4000 端口处于后台开启状态，完成你的更改，实时在浏览器刷新，确认无误后即可愉快地推送到 GitHub 远端仓库啦。</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 安装和配置 c/c++ 环境</title>
    <url>/posts/d0cf399e/</url>
    <content><![CDATA[<h3 id="安装-VSCode"><a href="#安装-VSCode" class="headerlink" title="安装 VSCode"></a>安装 VSCode</h3><p><a href="https://code.visualstudio.com/">VSCode 官网下载</a></p>
<h3 id="安装-MinGW-编译器下载和配置"><a href="#安装-MinGW-编译器下载和配置" class="headerlink" title="安装 MinGW 编译器下载和配置"></a>安装 MinGW 编译器下载和配置</h3><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGW 官网下载</a></p>
<ul>
<li>在线安装——下载 MinGW-W64-install.exe（速度慢）</li>
<li>下载压缩包——×86_64-posix-sjlj（速度快）</li>
</ul>
<h4 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h4><ul>
<li>在 Path 中新建</li>
<li>粘贴 MinGW 里的 bin 目录路径</li>
</ul>
<h4 id="检查是否配置成功"><a href="#检查是否配置成功" class="headerlink" title="检查是否配置成功"></a>检查是否配置成功</h4><ul>
<li>在 MinGW 里的 bin 打开 cmd</li>
<li>输入 gcc -v 或 gcc -v 或 g++ -v</li>
<li>输出一段代码后出现 <code>gcc version</code> 说明配置成功</li>
</ul>
<h3 id="VSCode-配置-C-x2F-C"><a href="#VSCode-配置-C-x2F-C" class="headerlink" title="VSCode 配置 C&#x2F;C++"></a>VSCode 配置 C&#x2F;C++</h3><ul>
<li>VSCode 安装插件 C&#x2F;C++</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>新建用于存放 C 文件的文件夹</li>
<li>在该文件夹下创建一个 <code>.vscode</code> 文件夹并创建三个文件</li>
<li>分别是<code>c_cpp_properties.json</code>,<code>launch.json</code>,<code>tasks.json</code></li>
</ul>
<ol>
<li><code>c_cpp_properties.json</code></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_UNICODE&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.17763.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minGW\\bin\\g++.exe&quot;</span> <span class="comment">/*修改成自己bin目录下的g++.exe，要求 绝对路径 ，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>launch.json</code></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 使用 IntelliSense 了解相关属性。</span></span><br><span class="line">  <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">  <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++.exe build and debug active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MinGW\\bin\\gdb.exe&quot;</span> <span class="comment">/*修改成自己bin目录下的gdb.exe，要求 绝对路径 ，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task g++&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>tasks.json</code></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">  <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MinGW\\bin\\g++.exe&quot;</span> <span class="comment">/*修改成自己bin目录下的g++.exe，要求 绝对路径 ,这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span> <span class="comment">/*修改成自己放c/c++项目的文件夹，要求 绝对路径 ,这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-std=c++17&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MinGW\\bin&quot;</span> <span class="comment">/*修改成自己bin目录，要求 绝对路径 ,这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$gcc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. c语言程序窗口执行到scanf函数出现闪退</span><br><span class="line">可在头文件加上 #include&lt;stdlib&gt; ，main函数里return上面加上 system(&quot;pause&quot;);  可防止程序窗口闪退</span><br><span class="line">2. c++直接加system(&quot;pause&quot;);</span><br><span class="line">3. 一定要先创建一个.vscode文件夹，记住前面有一个点，这个文件夹用来存放3个json配置文件，记住3个json文件要放进.vscode里面！！！</span><br></pre></td></tr></table></figure>

<h3 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h3><h4 id="更改代码运行控制台"><a href="#更改代码运行控制台" class="headerlink" title="更改代码运行控制台"></a>更改代码运行控制台</h4><ul>
<li>如果你不想每次运行都弹出个小黑框(Window 继承控制台)</li>
<li>你可以在 <code>launch.json</code> 文件中找到 <code>&quot;externalConsole&quot;: false</code> 并把 false 改为 true</li>
</ul>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 常用快捷键</title>
    <url>/posts/1d77edc9/</url>
    <content><![CDATA[<h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><span id="more"></span>

<ul>
<li><code>shift + alt +f</code></li>
</ul>
<h4 id="快速复制一行"><a href="#快速复制一行" class="headerlink" title="快速复制一行"></a>快速复制一行</h4><ul>
<li><p><code>Shift + Alt + ↓/↑</code></p>
</li>
<li><p>在某行直接<code>Ctrl + C + Ctrl + V</code></p>
</li>
</ul>
<h4 id="快速定位到某一行"><a href="#快速定位到某一行" class="headerlink" title="快速定位到某一行"></a>快速定位到某一行</h4><ul>
<li><code>Ctrl + G</code></li>
</ul>
<h4 id="选中单词"><a href="#选中单词" class="headerlink" title="选中单词"></a>选中单词</h4><ul>
<li>在单词首或尾 <code>Ctrl + Shift + ←/→</code></li>
</ul>
<h4 id="选定多个相同的单词"><a href="#选定多个相同的单词" class="headerlink" title="选定多个相同的单词"></a>选定多个相同的单词</h4><ul>
<li>选定某词直接 <code>Ctrl + D</code></li>
</ul>
<h4 id="全局替换某个单词"><a href="#全局替换某个单词" class="headerlink" title="全局替换某个单词"></a>全局替换某个单词</h4><ul>
<li><code>Ctrl + H</code></li>
</ul>
<h4 id="选择某个区块"><a href="#选择某个区块" class="headerlink" title="选择某个区块"></a>选择某个区块</h4><ul>
<li>按住 <code>Alt + Shift</code> 选择或拖动鼠标</li>
</ul>
<h4 id="放大缩小整个编辑器界面"><a href="#放大缩小整个编辑器界面" class="headerlink" title="放大缩小整个编辑器界面"></a>放大缩小整个编辑器界面</h4><ul>
<li><code>Ctrl + +/-</code></li>
</ul>
<h4 id="光标定位到单词首-x2F-单词尾"><a href="#光标定位到单词首-x2F-单词尾" class="headerlink" title="光标定位到单词首&#x2F;单词尾"></a>光标定位到单词首&#x2F;单词尾</h4><ul>
<li><code>Ctrl + ←/→</code></li>
</ul>
<h4 id="光标定位到行首-x2F-行未"><a href="#光标定位到行首-x2F-行未" class="headerlink" title="光标定位到行首&#x2F;行未"></a>光标定位到行首&#x2F;行未</h4><ul>
<li><code>Home / End</code></li>
</ul>
<h4 id="添加多个光标"><a href="#添加多个光标" class="headerlink" title="添加多个光标"></a>添加多个光标</h4><ul>
<li><code>Ctrl + Alt + ↑/↓</code></li>
</ul>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>csgo启动项、常用指令以及按键绑定</title>
    <url>/posts/18db92a5/</url>
    <content><![CDATA[<h4 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h4><p>steam 界面右键 CSGO 点击属性配置启动项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-perfectworld -novid -console -useforcedmparms -noforcemaccel -noforcemspd -freq 144 -tickrate 128</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-perfectworld //是国服的命令（-worldwide 是国际服的命令）</span><br><span class="line">-novid //跳过开场动画</span><br><span class="line">-console //进入游戏默认启用控制台</span><br><span class="line">-useforcedmparms -noforcemaccel -noforcemspd //三条指令一起，去除系统鼠标加速</span><br><span class="line">-freq 144 //启动游戏时同时设置你的屏幕的刷新率为144赫兹，该启动项后数字应对应你的屏幕本身最高刷新率</span><br><span class="line">-tickrate 128 //将服务器刷新率设为128（并非强制设置）</span><br></pre></td></tr></table></figure>

<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><p>注意：<br>以下指令都在 <code>console</code> 控制台中输入，<code>console</code> 在启动项中加入 <code>-console</code> 在游戏中按下 <code>~</code> 键即可打开</p>
<h5 id="设置最大-FPS"><a href="#设置最大-FPS" class="headerlink" title="设置最大 FPS"></a>设置最大 FPS</h5><p>以 <code>200</code> 为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fps_max 200</span><br></pre></td></tr></table></figure>

<h5 id="显示-FPS-信息"><a href="#显示-FPS-信息" class="headerlink" title="显示 FPS 信息"></a>显示 FPS 信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cl_showfps 0 //左上角显示FPS</span><br><span class="line">net_graph 0 //网络状态、帧数显示</span><br><span class="line">net_graphpos 0 //0-2参数显示在界面左边、右边、中键</span><br><span class="line">net_graphheight 0//修改参数显示位置高度(像素)</span><br><span class="line">net_graphproportionalfont 1 //参数显示字体大小(默认1)</span><br></pre></td></tr></table></figure>

<h4 id="按键绑定"><a href="#按键绑定" class="headerlink" title="按键绑定"></a>按键绑定</h4><h5 id="绑定跳投"><a href="#绑定跳投" class="headerlink" title="绑定跳投"></a>绑定跳投</h5><p>以 <code>mouse5</code> 为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias +jumpthrow”+jump;-attack;-attack2″;</span><br><span class="line"></span><br><span class="line">alias -jumpthrow -jump;</span><br><span class="line"></span><br><span class="line">bind mouse5 +jumpthrow;</span><br></pre></td></tr></table></figure>

<p>注意：<br>按下跳投键之前要按住鼠标左键</p>
<h5 id="绑定清除血迹"><a href="#绑定清除血迹" class="headerlink" title="绑定清除血迹"></a>绑定清除血迹</h5><p>以下选 <code>一个</code> 想要的按键就行，原理就是加上 <code>r_cleardecals</code><br>打开 <code>console</code> 控制台输入以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind shift &quot;+speed; r_cleardecals&quot;//绑定WASD行走+去除血迹</span><br><span class="line">bind a &quot;+moveleft; r_cleardecals&quot;</span><br><span class="line">bind w &quot;+forward; r_cleardecals&quot;</span><br><span class="line">bind s &quot;+back; r_cleardecals&quot;</span><br><span class="line">bind d &quot;+moveright; r_cleardecals&quot;</span><br><span class="line">bind &quot;f&quot; &quot;+lookatweapon;r_cleardecals&quot; //检视武器 + 去除血迹</span><br><span class="line">bind &quot;SHIFT&quot; &quot;+speed;r_cleardecals&quot; //静步 + 去除血迹</span><br><span class="line">bind &quot;ctrl&quot; &quot;+duck;r_cleardecals&quot; //蹲下 + 去除血迹</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>也可以绑其他按键，不过清除血迹是为了方便按，所以选择和默认按键冲突（冲突也可以一起实现功能）</p>
<h5 id="绑定切换左右手"><a href="#绑定切换左右手" class="headerlink" title="绑定切换左右手"></a>绑定切换左右手</h5><p>以 <code>mouse4</code> 为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindtoggle mouse4 &quot;cl_righthand&quot;</span><br></pre></td></tr></table></figure>

<h5 id="想要解绑某个按键"><a href="#想要解绑某个按键" class="headerlink" title="想要解绑某个按键"></a>想要解绑某个按键</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unbind &#x27;按键名&#x27;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>比如你绑定了 <code>shift</code> 清除血迹，使用了 <code>unbind</code> 命令后静步也会失效</li>
<li>这时候 steam 界面右键 CSGO 选择 ‘管理’ -&gt; ‘浏览本地文件’，依次点击文件夹 ‘csgo’ -&gt; ‘cfg’</li>
<li>找到名为<code>config_default</code> 的文件</li>
<li>以记事本方式打开， <code>Ctrl + F</code> 查询 <code>SHIFT</code> 发现命令行 <code>bind &quot;SHIFT&quot; &quot;+speed&quot;</code></li>
<li>复制该行回到游戏打开 <code>console</code> 输入该命令行<br><code>shift</code> 静步指令又可以生效</li>
</ul>
<p>这个方法适用于其他默认按键被占用，想要解绑的情况</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CSGO</tag>
      </tags>
  </entry>
  <entry>
    <title>git从远程仓库克隆</title>
    <url>/posts/9af15ac6/</url>
    <content><![CDATA[<h4 id="在-GitHub-创建或找到一个库用-git-clone-命令"><a href="#在-GitHub-创建或找到一个库用-git-clone-命令" class="headerlink" title="在 GitHub 创建或找到一个库用 git clone 命令"></a>在 GitHub 创建或找到一个库用 git clone 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 完整地址</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>Git</code> 支持多种协议，包括 <code>https</code>，但 <code>ssh</code> 协议速度最快</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git修改内容查看</title>
    <url>/posts/ee64d9ac/</url>
    <content><![CDATA[<h4 id="使用-git-status-命令"><a href="#使用-git-status-命令" class="headerlink" title="使用 git status 命令"></a>使用 <code>git status</code> 命令</h4><p>举个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>git status</code> 命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code> 被修改过了，但还没有准备提交的修改。</p>
<p>虽然 <code>Git</code> 告诉我们 <code>readme.txt</code> 被修改了，但如果能看看具体修改了什么内容，自然是很好的。如果已经记不清上次怎么修改的 <code>readme.txt</code>，所以，需要用 <code>git diff</code> 这个命令看看：</p>
<h4 id="使用-git-diff-命令"><a href="#使用-git-diff-命令" class="headerlink" title="使用 git diff 命令"></a>使用 <code>git diff</code> 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt</span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>要随时掌握工作区的状态，使用 git status 命令。</p>
</li>
<li><p>如果 git status 告诉你有文件被修改过，用 git diff 可以查看修改内容。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git创建版本库</title>
    <url>/posts/ff01f13c/</url>
    <content><![CDATA[<h4 id="初始化一个-Git-仓库，使用-git-init-命令"><a href="#初始化一个-Git-仓库，使用-git-init-命令" class="headerlink" title="初始化一个 Git 仓库，使用 git init 命令"></a>初始化一个 Git 仓库，使用 <code>git init</code> 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>当前目录下多了一个 <code>.git</code> 的目录，这个目录是 <code>Git</code> 来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把 <code>Git</code> 仓库给破坏了</p>
<p>如果没有看到 <code>.git</code> 目录，那是因为这个目录默认是隐藏的，用 <code>ls -ah</code> 命令就可以看见</p>
<h4 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h4><p>以一个 <code>readme.txt</code> 为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<p>注意：<br>一定要把该文件放在有 <code>.git</code> 文件夹的同一文件夹内</p>
<p>建议：<br>Windows 用户用 <code>VSCode</code> 代替 <code>Windows</code> 自带记事本</p>
<h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>用命令 <code>git add</code> 告诉 git，把文件 <code>添加</code> 到仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add <span class="string">&#x27;文件名&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行上面的命令，没有任何显示就对了</p>
<h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>用命令 <code>git commit</code> 告诉 git，把文件 <code>提交</code> 到仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;本次提交的说明&quot;</span></span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>

<p>本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录</p>
<p>执行上面的命令成功之后会返回文件改动的信息</p>
<h5 id="为什么-Git-添加文件需要-add，commit-一共两步"><a href="#为什么-Git-添加文件需要-add，commit-一共两步" class="headerlink" title="为什么 Git 添加文件需要 add，commit 一共两步"></a>为什么 Git 添加文件需要 <code>add</code>，<code>commit</code> 一共两步</h5><p>因为 <code>commit</code> 可以一次提交很多文件，所以你可以多次 <code>add</code> 不同的文件，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>-m</code> 表示 message，是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录</p>
<h4 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h4><p>Q：输入 <code>git add readme.txt</code>，得到错误：<code>fatal: not a git repository (or any of the parent directories)</code></p>
<p>A：<code>Git</code> 命令必须在 <code>Git</code> 仓库目录内执行（<code>git init</code> 除外），在仓库目录外执行是没有意义的。</p>
<p>Q：输入 <code>git add readme.txt</code>，得到错误 <code>fatal: pathspec &#39;readme.txt&#39; did not match any files</code></p>
<p>A：添加某个文件时，该文件必须在当前目录下存在，用 <code>ls</code> 或者 <code>dir</code> 命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交文件到远程仓库</title>
    <url>/posts/da9248d7/</url>
    <content><![CDATA[<p>现在的情景是，你已经在本地创建了一个 <code>Git</code> 仓库后，又想在 <code>GitHub</code> 创建一个 <code>Git</code> 仓库，并且让这两个仓库进行远程同步</p>
<h4 id="初始化并从创建一个-readme-md-文件"><a href="#初始化并从创建一个-readme-md-文件" class="headerlink" title="初始化并从创建一个 readme.md 文件"></a>初始化并从创建一个 readme.md 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add README.MD</span><br></pre></td></tr></table></figure>

<h4 id="把文件添加并提交到仓库"><a href="#把文件添加并提交到仓库" class="headerlink" title="把文件添加并提交到仓库"></a>把文件添加并提交到仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add readme.md</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="把一个已有的本地仓库与之关联"><a href="#把一个已有的本地仓库与之关联" class="headerlink" title="把一个已有的本地仓库与之关联"></a>把一个已有的本地仓库与之关联</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -M main</span><br><span class="line">$ git remote add origin 仓库完整地址.git</span><br></pre></td></tr></table></figure>

<p>添加后，远程库的名字就是 <code>origin</code>，这是 <code>Git</code> 默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库</p>
<h4 id="把本地库的所有内容推送到远程库上"><a href="#把本地库的所有内容推送到远程库上" class="headerlink" title="把本地库的所有内容推送到远程库上"></a>把本地库的所有内容推送到远程库上</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin main</span><br></pre></td></tr></table></figure>

<p>把本地库的内容推送到远程，用 <code>git push</code> 命令，实际上是把当前分支 <code>main</code> 推送到远程</p>
<p>由于远程库是空的，第一次推送 <code>main</code> 分支时，加上了 <code>-u</code> 参数，<code>Git</code> 不但会把本地的 <code>main</code> 分支内容推送的远程新的 <code>main</code> 分支，还会把本地的 <code>main</code> 分支和远程的 <code>main</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令</p>
<p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样</p>
<p>从现在起，只要本地作了提交，就可以通过命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin main</span><br></pre></td></tr></table></figure>

<p>把本地 <code>main</code> 分支的最新修改推送至 <code>GitHub</code></p>
<h4 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h4><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用 <code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用 <code>git remote -v</code> 查看远程库信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin git@github.com:michaelliao/learn-git.git (fetch)</span><br><span class="line">origin git@github.com:michaelliao/learn-git.git (push)</span><br></pre></td></tr></table></figure>

<p>然后，根据名字删除，比如删除 <code>origin</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure>

<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到 <code>GitHub</code>，在后台页面找到删除按钮再删除。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>要关联一个远程库，使用命令 <code>git remote add origin 仓库完整地址.git；</code></p>
<p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code> 是默认习惯命名；</p>
<p>关联后，使用命令 <code>git push -u origin main</code> 第一次推送 <code>main</code> 分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin main</code> 推送最新修改</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 配置 https 和 ssh 免密码登录</title>
    <url>/posts/8a44e1d6/</url>
    <content><![CDATA[<h4 id="区分-https-clone-和-ssh-clone"><a href="#区分-https-clone-和-ssh-clone" class="headerlink" title="区分 https clone 和 ssh clone"></a>区分 https clone 和 ssh clone</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不同的克隆方式导致校验方式不同，对应的免秘方式也不一样。</span><br><span class="line">https通过记住账号密码免登，ssh通过校验生成的密钥免登。</span><br><span class="line">通常都用ssh校验。</span><br></pre></td></tr></table></figure>

<h4 id="https-免密配置方法"><a href="#https-免密配置方法" class="headerlink" title="https 免密配置方法"></a>https 免密配置方法</h4><h5 id="设置配置-git-x2F-config"><a href="#设置配置-git-x2F-config" class="headerlink" title="设置配置 .git &#x2F; config"></a>设置配置 .git &#x2F; config</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper store</span><br><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure>

<h5 id="输入一次账号密码后第二次就会记住账号密码。"><a href="#输入一次账号密码后第二次就会记住账号密码。" class="headerlink" title="输入一次账号密码后第二次就会记住账号密码。"></a>输入一次账号密码后第二次就会记住账号密码。</h5><h4 id="ssh-免密配置方法"><a href="#ssh-免密配置方法" class="headerlink" title="ssh 免密配置方法"></a>ssh 免密配置方法</h4><h5 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line"></span><br><span class="line">$ git config --global user.name <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">&#x27;用户邮箱&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意 <code>git config</code> 命令的 <code>--global</code> 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址</p>
<h5 id="执行生成公钥和私钥的命令"><a href="#执行生成公钥和私钥的命令" class="headerlink" title="执行生成公钥和私钥的命令"></a>执行生成公钥和私钥的命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>按回车 3 下 一般都是直接不写为空 直接回车</p>
<h5 id="执行查看公钥的命令"><a href="#执行查看公钥的命令" class="headerlink" title="执行查看公钥的命令"></a>执行查看公钥的命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>npm修改默认安装路径</title>
    <url>/posts/c0f58d3c/</url>
    <content><![CDATA[<h4 id="使用-npm-config-ls-查看-npm-相关配置"><a href="#使用-npm-config-ls-查看-npm-相关配置" class="headerlink" title="使用 npm config ls 查看 npm 相关配置"></a>使用 <code>npm config ls</code> 查看 npm 相关配置</h4><h4 id="在-Node-根目录-含-node-exe-新建两个文件夹-node-global-和-node-cache"><a href="#在-Node-根目录-含-node-exe-新建两个文件夹-node-global-和-node-cache" class="headerlink" title="在 Node 根目录(含 node.exe)新建两个文件夹 node_global 和 node_cache"></a>在 Node 根目录(含 node.exe)新建两个文件夹 <code>node_global</code> 和 <code>node_cache</code></h4><ul>
<li><code>node_global</code> 用于存放全局安装的包</li>
<li><code>node_cache</code> 用于存放缓存</li>
</ul>
<h4 id="cmd-设置路径地址-绝对地址"><a href="#cmd-设置路径地址-绝对地址" class="headerlink" title="cmd 设置路径地址(绝对地址)"></a>cmd 设置路径地址(绝对地址)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;node\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;node\node_cache&quot;</span></span><br></pre></td></tr></table></figure>
<p>这两行命令执行后默认没有提示则说明成功</p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>在系统变量 Path 中添加三行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%NODE_HOME%</span><br><span class="line">%NODE_HOME%/node_global</span><br><span class="line">%NODE_HOME%/node_modules</span><br></pre></td></tr></table></figure>
<p>前提是在系统变量中存在 <code>NODE_HOME</code> ,值为有 node.exe 的地址<br>例如我的 <code>NODE_HOME</code> 值为 <code>D:\apps\nvs\node\16.17.0\x64</code></p>
]]></content>
      <categories>
        <category>包管理工具</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Steam根目录下userdata文件夹命名规则</title>
    <url>/posts/18fdbd3b/</url>
    <content><![CDATA[<h4 id="查询网址"><a href="#查询网址" class="headerlink" title="查询网址"></a>查询网址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://steamid.io/</span><br></pre></td></tr></table></figure>

<p>在搜索框中输入完整个人资料 url -&gt; lookup</p>
<p>返回的结果之中，数字 id 是第二个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steamID3 [U:1:数字id]</span><br></pre></td></tr></table></figure>

<h4 id="userdata-文件夹命名规则"><a href="#userdata-文件夹命名规则" class="headerlink" title="userdata 文件夹命名规则"></a>userdata 文件夹命名规则</h4><p>userdata 文件夹以 steamID3 中的一串数字命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steamID    STEAM_0:0:55xxxx736</span><br><span class="line">steamID3   [U:1:111xxxx472]</span><br><span class="line">steamID64  7656119907xxxx200</span><br></pre></td></tr></table></figure>

<h4 id="查询个人资料完整-url"><a href="#查询个人资料完整-url" class="headerlink" title="查询个人资料完整 url"></a>查询个人资料完整 url</h4><p>在 steam 首页左上角点击 <code>Steam</code> -&gt; <code>设置</code> -&gt; <code>界面</code><br>将 <code>当可用时显示网站地址栏</code> 勾选 -&gt; <code>确定</code><br>此时点进自己的个人资料可以看到界面出现绿色的完整的个人资料 url</p>
<h4 id="id-换算"><a href="#id-换算" class="headerlink" title="id 换算"></a>id 换算</h4><p>以下面的 64 位 ID 为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">76561198017505237</span><br></pre></td></tr></table></figure>

<p>需要去掉前面的 <code>7656</code> 减去常数 <code>1197960265728</code> 然后&#x2F;2<br>去掉前面的 <code>7656</code> 得 <code>1198017505237</code>，<br>减去 <code>1197960265728</code> 得 <code>57239509</code><br>然后 userdata&lt;通过以上方法算出的数字&gt;\内的就是以 steamappid（Steam Application IDs）命名的文件夹<br>例如：Steam 客户端所安装的盘符:\Steam\userdata\你的 Steam 32 位 ID</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Steam</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo-abbrlink</title>
    <url>/posts/b13c3db0/</url>
    <content><![CDATA[<h4 id="博客链接都变成-undefined-了？"><a href="#博客链接都变成-undefined-了？" class="headerlink" title="博客链接都变成 undefined 了？"></a>博客链接都变成 undefined 了？</h4><ul>
<li><p>首先，检查博客文件下的 <code>_config.yml</code> 文件，找到 <code>permalink:</code> 在下面查看语句</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">permalink: post/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">alg: crc32</span><br><span class="line">rep: hex</span><br></pre></td></tr></table></figure></li>
<li><p>我今天遇到的问题是把 abbrlink 误删了一个 k，这直接修改了地址，hexo 在这种情况下会跳转到你的第一篇文章，不过网址是 &#x2F;undefined</p>
</li>
<li><p>这也是开启了 VSCode 修改自动保存的风险所在，博客运行并无报错，这是最难受的，所以我只能一点一点排查问题。</p>
</li>
</ul>
<h4 id="点击文章变成了下载？"><a href="#点击文章变成了下载？" class="headerlink" title="点击文章变成了下载？"></a>点击文章变成了下载？</h4><ul>
<li><code>permalink</code> 是可以修改的</li>
<li>比如 <code>permalink: Be11amy/:abbrlink/</code> ，看起来更加有个性和简洁</li>
<li>但是，<code>abbrlink</code> 后面的 <code>/</code> 不能省略，否则就会出现点不开文章变成下载的情况</li>
<li>这里是 <code>hexo-abbrlink</code> 的 <a href="https://github.com/Rozbo/hexo-abbrlink">项目地址</a></li>
</ul>
<h4 id="新建文章的时候没有同时新建-abbrlink"><a href="#新建文章的时候没有同时新建-abbrlink" class="headerlink" title="新建文章的时候没有同时新建 abbrlink"></a>新建文章的时候没有同时新建 abbrlink</h4><ul>
<li>别着急，在 new 了一篇新文章后，<code>hexo d</code> 命令行执行后就自动生成了，别忘了在前面先执行 <code>hexo cl</code></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基础语法</title>
    <url>/posts/4664ae19/</url>
    <content><![CDATA[<p>参考：<a href="https://www.jianshu.com/p/65fa2c72c124">Markdown基础语法</a></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTex数学公式</title>
    <url>/posts/c57d1942/</url>
    <content><![CDATA[<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/ViatorSun/article/details/82826664">超详细 LaTex数学公式</a></li>
<li><a href="https://www.jianshu.com/p/a04775fde077">Markdown与数学公式</a></li>
</ul>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>LateX</tag>
      </tags>
  </entry>
  <entry>
    <title>vi/vim的使用</title>
    <url>/posts/5c57039f/</url>
    <content><![CDATA[<p>基本上 vi&#x2F;vim 共分为三种模式，命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）。</p>
<h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。<br>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。<br>以下是普通模式常用的几个命令：<br><code>i</code> – 切换到输入模式，在光标当前位置开始输入文本。<br><code>x</code> – 删除当前光标所在处的字符。<br><code>:</code> – 切换到底线命令模式，以在最底一行输入命令。<br><code>a</code> – 进入插入模式，在光标下一个位置开始输入文本。<br><code>o</code> – 在当前行的下方插入一个新行，并进入插入模式。<br><code>O</code> – 在当前行的上方插入一个新行，并进入插入模式。<br><code>dd</code> – 剪切当前行。<br><code>yy</code> – 复制当前行。<br><code>p</code>（小写） – 粘贴剪贴板内容到光标下方。<br><code>P</code>（大写）– 粘贴剪贴板内容到光标上方。<br><code>u</code> – 撤销上一次操作。<br><strong>Ctrl + r</strong> – 重做上一次撤销的操作。<br><code>:w</code> – 保存文件。<br><code>:q</code> – 退出 Vim 编辑器。<br><code>:q!</code> – 强制退出Vim 编辑器，不保存修改。<br>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。<br>命令模式只有一些最基本的命令，因此仍要依靠底线命令行模式输入更多命令。</p>
<h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。<br>在输入模式中，可以使用以下按键：<br>字符按键以及Shift组合，输入字符<br><strong>ENTER</strong>，回车键，换行<br><strong>BACK SPACE</strong>，退格键，删除光标前一个字符<br><strong>DEL</strong>，删除键，删除光标后一个字符<br><strong>方向键</strong>，在文本中移动光标<br><strong>HOME&#x2F;END</strong>，移动光标到行首&#x2F;行尾<br><strong>Page Up&#x2F;Page Down</strong>，上&#x2F;下翻页<br><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线<br><strong>ESC</strong>，退出输入模式，切换到命令模式</p>
<h5 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h5><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。<br>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<br>在底线命令模式中，基本的命令有（已经省略了冒号）：<br><code>:w</code>：保存文件。<br><code>:q</code>：退出 Vim 编辑器。<br><code>:wq</code>：保存文件并退出 Vim 编辑器。<br><code>:q!</code>：强制退出Vim编辑器，不保存修改。<br>按 ESC 键可随时退出底线命令模式。<br>参考：<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>如何利用ssh命令访问远程服务器</title>
    <url>/posts/59ee5c4/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\xxx\&gt;ssh -p 22 user@host</span><br></pre></td></tr></table></figure>
<p>参数:<br>-p：指定端口号。<br>user：登录的用户名。<br>host：登录的主机。<br>默认端口号是22，所以可以省略，直接使用以下方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure>
<p>成功后需要输入密码，然后即可使用远程服务器。<br>要想退出，直接输入exit即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base)root@xxx:~# <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>如何运行Linux操作系统的.sh文件</title>
    <url>/posts/9c0df2b2/</url>
    <content><![CDATA[<p>运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh filename.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何把Notion安装到其他盘</title>
    <url>/posts/604b675f/</url>
    <content><![CDATA[<ol>
<li><a href="https://www.notion.so/desktop">官网下载Notion最新版</a></li>
<li>找到你下载的.exe安装包</li>
<li>在地址栏输入cmd后回车</li>
<li>（英文输入状态下）输入 “安装包名” &#x2F;D&#x3D;”你想要安装的路径”<br>比如我想安装到 D:\ImageText\Notion<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Notion Setup 3.7.0.exe&quot;</span> /D=<span class="string">&quot;D:\Application\notion&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>安装完成</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>小层对比的划分</title>
    <url>/posts/b9c1b045/</url>
    <content><![CDATA[<p>使用测井曲线中的自然伽马(Gamma-ray, GR)和电阻率(Resistivity)来划分小层时，通常依据以下标准：</p>
<ol>
<li>自然伽马(GR)：自然伽马测井可以反映岩石的放射性含量，通常泥岩和粘土具有较高的放射性，而砂岩和碳酸盐岩等储集岩放射性较低。因此，自然伽马曲线可以用来识别泥岩夹层或页岩层，这些通常作为非储集层。自然伽马的突然增加往往标志着一个新的地层的开始。</li>
<li>电阻率：电阻率测井可以反映岩石的导电性，通常用来区分含水的泥岩或砂岩（低电阻率）和含油的砂岩（高电阻率）。电阻率的突然变化可能指示着岩性的变化或流体含量的变化，从而可能是一个新的小层的开始。<br>划分小层的具体标准可能包括：</li>
</ol>
<ul>
<li>GR和电阻率曲线的异常变化：如果GR和电阻率曲线在某个深度发生显著变化，这可能指示着岩性或流体性质的变化，从而可能是小层的边界。</li>
<li>曲线的形态和趋势：曲线的形态和趋势（如平滑、突增、突减）可以提供有关小层连续性和变化的信息。</li>
<li>交会图分析：使用GR和电阻率数据制作交会图，可以帮助识别不同的岩性或流体区域，从而辅助小层划分。</li>
<li>与岩心和地震资料的对比：将测井曲线与岩心资料和地震资料进行对比，可以帮助确定小层的地质特征和空间分布。</li>
<li>区域地质知识：了解区域地质背景和地层序列，可以帮助解释测井曲线的变化，并指导小层的划分。</li>
<li>生产数据：生产数据（如产油、产气、产水情况）可以提供小层流体性质的实际信息，验证和调整小层划分。<br>在实际应用中，小层的划分通常需要综合考虑多种测井曲线和其他地质数据，结合地质学家的经验和专业知识。这个过程可能需要不断地迭代和修正，以确保小层划分的准确性和可靠性。<br>总结：重点考察GR和RT、RXO突变的点。</li>
</ul>
]]></content>
      <categories>
        <category>测井</category>
      </categories>
      <tags>
        <tag>测井</tag>
        <tag>地质知识</tag>
      </tags>
  </entry>
  <entry>
    <title>常见测井方法以及储层参数</title>
    <url>/posts/3ce6c508/</url>
    <content><![CDATA[<h4 id="测井方法"><a href="#测井方法" class="headerlink" title="测井方法"></a>测井方法</h4><h5 id="声波（Acoustic-Logging）"><a href="#声波（Acoustic-Logging）" class="headerlink" title="声波（Acoustic Logging）"></a>声波（Acoustic Logging）</h5><p>测量岩石的声波传播速度，帮助确定岩石的密度和弹性模量，进而推断岩石的孔隙度和裂缝发育情况。</p>
<h5 id="中子（Neutron-Logging）"><a href="#中子（Neutron-Logging）" class="headerlink" title="中子（Neutron Logging）"></a>中子（Neutron Logging）</h5><p>通过测量中子在地层中的散射和吸收情况来获取岩石的孔隙度信息。</p>
<h5 id="密度（Density-Logging）"><a href="#密度（Density-Logging）" class="headerlink" title="密度（Density Logging）"></a>密度（Density Logging）</h5><p>通过测量地层的电子密度来推断岩石的密度，进而了解其孔隙度。</p>
<h5 id="伽马（Gamma-Ray-Logging）"><a href="#伽马（Gamma-Ray-Logging）" class="headerlink" title="伽马（Gamma Ray Logging）"></a>伽马（Gamma Ray Logging）</h5><p>量地层岩石自然放射的伽马射线强度，帮助识别岩石的岩性和含泥量。</p>
<h5 id="径向电阻率（Resistivity-Tool）"><a href="#径向电阻率（Resistivity-Tool）" class="headerlink" title="径向电阻率（Resistivity Tool）"></a>径向电阻率（Resistivity Tool）</h5><p>RT通常指的是电阻率测井工具，这是一种用于测量地层电阻率的工具。电阻率测井可以提供关于岩石的含水量、孔隙度和渗透性的信息，这对于评估油气藏的产能和可采性非常重要。电阻率测井工具可以测量不同的电阻率，包括径向电阻率（Rt）和侧向电阻率（Rxo）。</p>
<h5 id="侧向电阻率（”RXO”-Logging-Tool）"><a href="#侧向电阻率（”RXO”-Logging-Tool）" class="headerlink" title="侧向电阻率（”RXO” Logging Tool）"></a>侧向电阻率（”RXO” Logging Tool）</h5><p>RXO是侧向电阻率测井的缩写，是一种电阻率测井技术，用于测量地层岩石的电阻率。侧向电阻率测井可以提供比常规电阻率测井更准确的地层电阻率图像，因为它减少了井壁附近泥浆滤液侵入的影响。RXO通常指的是侧向电阻率测井工具或测量结果。</p>
<h4 id="三个重要储层参数"><a href="#三个重要储层参数" class="headerlink" title="三个重要储层参数"></a>三个重要储层参数</h4><h5 id="孔隙度（Porosity）"><a href="#孔隙度（Porosity）" class="headerlink" title="孔隙度（Porosity）"></a>孔隙度（Porosity）</h5><p>孔隙度表示岩石中空隙体积与总岩石体积的比例。通常是以百分比（%）或以小数形式表示<br>孔隙度的范围因岩石类型和地质环境而异，但通常在以下范围内：</p>
<ul>
<li>低孔隙度：0-5% 或 0.00-0.05<br>一般出现在非常致密的岩石中，例如某些致密砂岩或页岩。</li>
<li>中等孔隙度：5-20% 或 0.05-0.20<br>常见于大部分储集层岩石，如普通砂岩、石灰岩等。</li>
<li>高孔隙度：20-35% 或 0.20-0.35<br>通常出现在良好的储集层岩石中，如一些高孔隙度砂岩或某些含气岩层。</li>
<li>非常高孔隙度：35%以上 或 0.35以上<br>一般不常见，可能出现在非常特殊的地质环境中。</li>
</ul>
<h5 id="渗透率（Permeability）"><a href="#渗透率（Permeability）" class="headerlink" title="渗透率（Permeability）"></a>渗透率（Permeability）</h5><p>渗透率反映了岩石中流体流动的能力，渗透率越高，表示岩石越容易让流体通过，反之则越难。渗透率的单位通常是达西（Darcy，符号为D），由于地层的渗透率往往较低，实际应用中更多使用毫达西（mD）。<br>渗透率的范围可以有很大的变化，具体数值取决于岩石的类型和结构：</p>
<ul>
<li>极低渗透率 (&lt; 0.1 mD)：致密砂岩、页岩等</li>
<li>低渗透率 (0.1 mD - 10 mD)：一般砂岩、泥岩</li>
<li>中等渗透率 (10 mD - 100 mD)：优质储层</li>
<li>高渗透率 (100 mD - 1000 mD)：非常优质的储层</li>
<li>极高渗透率 (&gt; 1000 mD)：如裂缝性储层或高度可渗透的砂岩</li>
</ul>
<h5 id="含水饱和度（Water-Saturation）"><a href="#含水饱和度（Water-Saturation）" class="headerlink" title="含水饱和度（Water Saturation）"></a>含水饱和度（Water Saturation）</h5><p>水饱和度表示岩石孔隙中被水填充的比例。通常是以百分比（%）或以小数形式表示<br>水饱和度的正常范围可以根据储层和流体性质有所变化，但一般来说：</p>
<ul>
<li>0% - 30%：低水饱和度，通常表示油气含量较高的储层。</li>
<li>30% - 60%：中等水饱和度，储层中可能含有油气和水。</li>
<li>60% - 100%：高水饱和度，表示储层中水含量较高，可能是含水层或油气层的含水部分。</li>
</ul>
]]></content>
      <categories>
        <category>测井</category>
      </categories>
      <tags>
        <tag>测井</tag>
        <tag>地质知识</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习的模型选择与评估</title>
    <url>/posts/bee4e068/</url>
    <content><![CDATA[<h3 id="经验误差与过拟合"><a href="#经验误差与过拟合" class="headerlink" title="经验误差与过拟合"></a>经验误差与过拟合</h3><h4 id="经验误差"><a href="#经验误差" class="headerlink" title="经验误差"></a>经验误差</h4><p>首先清楚两个概念：<br>错误率（error rate）：分类错误的样本占样本总数的比例，即如果在m个样本中有a个样本分类错误，则错误率是E&#x3D;a&#x2F;m<br>精度（accuracy）：精度&#x3D;1-a&#x2F;m<br>一般地，把学习器在训练集的误差称为“训练误差”（training error）或“经验误差”（empirical error），在新样本上的误差称为“泛化误差”（generalization error）<br>显然，最终想要得到的是泛化误差小的学习器。</p>
<h4 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h4><p>为了得到在新样本上表现好的学习器，应该从训练样本中尽可能学出适用于所有潜在样本的“普遍规律”。当学习器把训练样本学习得“太好”的时候，这样会导致泛化性能下降。这种现象在机器学习中称为“过拟合”（overfitting），与其相对的是“欠拟合”（underfitting）。<br>有多种因素可能导致过拟合，其中最常见情况是由于学习能力过于强大，以至于把训练样本所包含的不太一般的特性都学到了，而欠拟合则通常是由于学习能力底下造成的。欠拟合比较容易客服，例如在决策树学习中扩展分支、在神经网络学习中增加训练轮数等，而过拟合则很麻烦，因为过拟合是不可避免的，能做的只是“缓解”，或者说减小其风险。<br>在现实任务中，理想的解决方法是对候选模型的泛化误差进行评估，然后选择泛化误差最小的那个模型。然而泛化误差是无法直接获得的，而训练误差又由于过拟合现象的存在不适合作为标准，那么，就需要思考如何对模型进行评估与选择。</p>
<h3 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h3><h4 id="留出法（hold-out）"><a href="#留出法（hold-out）" class="headerlink" title="留出法（hold-out）"></a>留出法（hold-out）</h4><p>直接将数据集D划分为两个互斥的集合S和T，即D&#x3D;S∪T在S上训练出模型后，用T来评估其测试误差，作为对泛化误差的估计。<br>需要注意的是，训练&#x2F;测试集的划分要尽可能保持数据分布一致性。<br>另一个需要注意的是，一般要采用若干次划分、重复进行实验评估后取平均值作为留出法的评估结果。</p>
<h4 id="交叉验证法（cross-validation）"><a href="#交叉验证法（cross-validation）" class="headerlink" title="交叉验证法（cross validation）"></a>交叉验证法（cross validation）</h4><p>先将数据集D划分为k个大小相似的互斥子集，即D&#x3D;D1∪D2∪…∪Dk，每个子集Di都尽可能保持数据分布的一致性，即从D中通过分层采样得到。然后，每次用k-1个子集的并集作为训练集，余下的那个子集作为测试；这样就可以获得k组训练&#x2F;测试集，从而可以进行k次训练和测试，最终返回的是这k个测试结果的均值。<br>交叉验证法评估结果的稳定性和保真性在很大程度上取决于k的取值，为强调这一点，通常把交叉验证法称为“k折交叉验证”（k-fold cross validation）。k最常用的取值是10，此时称10折交叉验证。</p>
<h4 id="自助法（bootstrapping）"><a href="#自助法（bootstrapping）" class="headerlink" title="自助法（bootstrapping）"></a>自助法（bootstrapping）</h4><p>对包含m个样本的数据集D进行随机采样得到D’，执行m次采样，样本不会被采到的概率是0.368，所以由36.8%的样本不会出现在D’中，于是可以让D’用作训练集，D\D’用作测试集。这样的结果称为“包外估计”（out-of-bag estimate）<br>自助法在数据集小、难以有效划分训练&#x2F;测试集时很有用。<br>自助法产生的数据集改变了初始数据集的分布，会引入估计偏差。</p>
<h4 id="调参与最终模型"><a href="#调参与最终模型" class="headerlink" title="调参与最终模型"></a>调参与最终模型</h4><p>在进行模型评估和选择时，除了要对适用学习算法进行选择，还需对算法参数进行设定，这就是调参（parameter stunning）<br>在模型评估与选择过程中需要留出一部分数据进行评估测试，但是当模型选择完成后学习算法和参数配置已选定，此时应该用完整数据集重新训练模型，这个模型是最终提交用户的模型。<br>需要注意的是，通常把学得模型在实际使用中遇到的数据称为测试数据，为了加以区分，模型评估与选择中用于评估测试的数据集常称为“验证集”（validation set）。所以模型选择和调参是基于验证集上的性能，实际使用时的泛化能力由测试集上的判别效果来估计。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习的缩写和名词</title>
    <url>/posts/40c8e92c/</url>
    <content><![CDATA[<h4 id="深度学习的分支"><a href="#深度学习的分支" class="headerlink" title="深度学习的分支"></a>深度学习的分支</h4><h5 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h5><ul>
<li><code>卷积神经网络（CNN）Convolutional Neural Network</code><br>主要用于图像和视频识别，也用于其他类型的数据，如文本和声音。</li>
<li><code>循环神经网络（RNN）Recurrent Neural Network</code><br>特别是长短期记忆网络（LSTM:Long Short-Term Memory）和门控循环单元（GRU:Gate Recurrent Unit），用于处理序列数据，如文本、时间序列和语音。<br>是循环神经网络（RNN）的一种，可以解决RNN中不能长期记忆和反向传播中的梯度等问题，与LSTM的作用类似，不过比LSTM简单，容易进行训练。</li>
<li><code>自编码器（Autoencoder）</code><br>用于无监督学习，尤其是特征学习和降维。</li>
<li><code>生成对抗网络（GAN）Generative Adversarial Network</code><br>用于生成数据，如图像、音乐和文本，也可以用于图像修复和增强。</li>
<li><code>变分自编码器（VAE）Variational Autoencoder</code><br>类似于自编码器，用于生成数据和无监督学习，特别擅长生成复杂的概率分布。</li>
<li><code>图神经网络（GNN）Graph Neural Network</code><br>用于处理图数据，如社交网络、知识图谱和推荐系统。</li>
<li><code>注意力机制（Attention Mechanisms）</code><br>用于提高模型的性能，特别是在处理长序列数据时，如机器翻译和文本摘要。</li>
<li><code>强化学习（Reinforcement Learning）</code><br>涉及与环境的交互，用于决策制定和优化策略，如游戏、自动驾驶和机器人控制。</li>
<li><code>Transformer模型</code><br>一种基于自注意力机制的深度神经网络架构，用于自然语言处理（NLP），如机器翻译和文本生成。</li>
</ul>
<h5 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h5><ul>
<li>训练损失（Loss）<br>定义：训练损失是模型在训练数据集上的损失值。<br>计算方式：每个 epoch 后，通过模型在训练集上的预测结果和真实标签计算损失函数（如均方误差、交叉熵等）。<br>意义：训练损失反映了模型在训练数据上的拟合程度。如果训练损失下降，说明模型在训练数据上的性能在提升。</li>
<li>验证损失（Validation Loss）<br>定义：验证损失是模型在验证数据集上的损失值。<br>计算方式：每个 epoch 后，通过模型在验证集上的预测结果和真实标签计算损失函数。<br>意义：验证损失反映了模型在未见过的数据（验证集）上的泛化能力。如果验证损失下降，说明模型在验证数据上的性能在提升，具有较好的泛化能力。</li>
<li>梯度爆炸（Gradient Explosion）<br>梯度（Gradient）是一个数学概念，用于描述函数在某一点上的局部变化率。在神经网络的背景下，梯度通常指的是损失函数相对于其参数的偏导数。<br>参考：<a href="https://www.bilibili.com/video/BV18P4y1j7uH/?spm_id_from=333.337.search-card.all.click&vd_source=251b9f270c90a8149c74eb986759892c">【梯度下降】3D可视化讲解通俗易懂</a><br>梯度爆炸指在反向传播过程中，梯度的值变得非常大，以至于无法正常训练模型。梯度爆炸通常发生在网络层数较多或网络结构复杂的情况下，特别是在使用ReLU（Rectified Linear Unit）激活函数时。</li>
<li>梯度消失（Gradient Vanishing）<br>梯度消失指的是在网络的反向传播过程中，用于更新网络权重的梯度变得非常小，以至于几乎不对权重产生任何显著的更新。这种现象通常发生在深层网络的较低层（靠近输入层的层）。</li>
<li>残差（Residual Error）<br>定义：指估计值与实际值直接的差，如果存在一个映射f(x)&#x3D;b，x&#x3D;x0时，则b-f(x0)则为残差，x-x0为误差。</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习的超参数</title>
    <url>/posts/6199195b/</url>
    <content><![CDATA[<ol>
<li>learning rate：决定了模型在训练过程中每个参数更新的幅度</li>
</ol>
<ul>
<li>影响收敛速度：<br>学习率过大会导致模型在训练过程中振荡，难以收敛。<br>学习率过小则可能导致训练过程缓慢，收敛速度慢。</li>
<li>影响过拟合：<br>学习率过大可能会导致模型在训练数据上过度拟合，而在测试数据上表现不佳。<br>学习率过小可能有助于减少过拟合，但可能会降低模型的泛化能力。</li>
<li>影响训练稳定性：<br>学习率的选择会影响训练过程的稳定性。<br>过大的学习率可能导致训练过程中的梯度消失或爆炸，影响训练稳定性。</li>
<li>影响模型的复杂度：<br>学习率的大小也间接影响了模型的复杂度。<br>学习率较小时，模型可能需要更多的训练迭代才能收敛，这意味着模型可能更复杂。<br>因此，选择合适的学习率对于深度学习模型的训练至关重要。在实践中，通常需要通过实验来调整学习率，以找到最佳的训练效果。常见的做法包括使用学习率衰减策略、学习率预热（Learning Rate Warmup）和调整学习率搜索（如使用学习率衰减、学习率搜索等方法）。</li>
</ul>
<ol start="2">
<li>epoch：它决定了模型在训练数据集上训练的完整遍数。一个完整的遍历（epoch）意味着模型会查看训练数据集中的每个样本一次，并对所有样本进行一次前向传播和相应的反向传播。</li>
</ol>
<ul>
<li>训练时间：<br>epoch 直接影响训练过程所需的时间。<br>较大的 epoch 需要更长的训练时间。</li>
<li>模型性能：<br>足够的 epoch 通常有助于模型在训练数据上达到更好的性能。<br>然而，过多的 epoch 可能导致过拟合，从而降低模型在未见过的数据上的表现。</li>
<li>收敛速度：<br>epoch 也影响模型的收敛速度。<br>较小的 epoch 可能导致收敛速度慢，而较大的 epoch 可能会使模型更快地收敛。</li>
<li>数据利用：<br>epoch 决定了数据集被利用的次数。<br>较高的 epoch 意味着数据集会被重复利用，这有助于模型更好地理解数据。<br>在实践中，通常需要通过实验来确定最佳的 epoch 值。这通常涉及到尝试不同的 epoch 值，并观察模型在验证集上的性能。通常，我们会在性能开始下降之前停止训练，以避免过拟合。</li>
</ul>
<ol start="3">
<li>dropout：一种在深度神经网络中常用的正则化技术，其目的是减少过拟合并提高模型的泛化能力</li>
</ol>
<ul>
<li>减少过拟合：<br>Dropout通过在训练过程中随机“关闭”一部分神经元，从而减少模型对特定神经元的依赖。<br>这有助于模型学习到更加鲁棒的特征表示，从而减少过拟合。</li>
<li>提高泛化能力：<br>通过减少模型对特定神经元的依赖，Dropout有助于提高模型在未见过的数据上的表现。<br>这使得模型在测试集或实际应用中的性能更佳。</li>
<li>训练效率：<br>Dropout可以加快训练速度，因为模型需要处理较少的参数。<br>同时，它还可以减少计算资源的需求。</li>
<li>网络结构：<br>Dropout可以作为网络架构的一部分，用于预训练或微调模型。<br>它可以在不同的层中应用，也可以根据需要调整保留的神经元比例。</li>
<li>正则化效果：<br>Dropout与L1、L2正则化等技术结合使用，可以进一步增强模型的正则化效果。<br>在实际应用中，Dropout的保留率（即在每次前向传播中保留的神经元比例）通常在0.1到0.5之间调整。这个比例的选择需要根据具体的任务和数据集进行实验确定。Dropout是一种非常有效的技术，被广泛应用于各种深度学习模型中。</li>
</ul>
<ol start="4">
<li>batch_size：指的是在一次梯度更新中使用的训练样本数量</li>
</ol>
<ul>
<li>训练速度：<br>较小的 batch_size 会增加训练的迭代次数，导致训练速度较慢。较大的 batch_size 则可以减少迭代次数，提高训练速度。</li>
<li>模型性能：<br>batch_size 的选择会影响模型的性能。较大的 batch_size 可能会导致模型在训练数据上的过拟合，而较小的 batch_size 有助于模型学习更细致的特征。</li>
<li>数值稳定性：<br>较大的 batch_size 可以减少数值稳定性问题，如梯度消失或爆炸。</li>
<li>经验法则：<br>对于图像分类任务，常见的 batch_size 值范围在32到256之间。对于自然语言处理（NLP）任务，batch_size 通常较小，例如32或64。<br>总之，batch_size 的选择需要平衡训练速度、模型性能和计算资源。通常，通过实验和调整，可以找到适合特定数据集和任务的最佳 batch_size。</li>
</ul>
<ol start="5">
<li>shuffle</li>
</ol>
<ul>
<li>Shuffle可以防止<strong>训练过程</strong>中的模型抖动，有利于模型的健壮性<br>假设训练数据分为两类，在未经过Shuffle的训练时，首先模型的参数会去拟合第一类数据，当大量的连续数据（第一类）输入训练时，会造成模型在第一类数据上的过拟合。当第一类数据学习结束后模型又开始对大量的第二类数据进行学习，这样会使模型尽力去逼近第二类数据，造成新的过拟合现象。这样反复的训练模型会在两种过拟合之间徘徊，造成模型的抖动，也不利于模型的收敛和训练的快速收敛</li>
<li>Shuffle可以防止过拟合，并且使得模型学到更加正确的特征<br>NN网络的学习能力很强，如果数据未经过打乱，则模型反复依次序学习数据的特征，很快就会达到过拟合状态，并且有可能学会的只是数据的次序特征。模型的缺乏泛化能力。<br>如：100条数据中前50条为A类剩余50条为B类，模型在很短的学习过程中就学会了50位分界点，且前半部分为A后半部分为B。则并没有学会真正的类别特征。</li>
<li>为使得训练集，验证集，测试集中数据分布类似</li>
</ul>
<p>参考：<a href="https://blog.csdn.net/xian0710830114/article/details/122856047?spm=1001.2014.3001.5502">深度学习调参tricks总结</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络中的激活函数</title>
    <url>/posts/93738823/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>激活函数（Activation Function），就是在人工神经网络的神经元上运行的函数，负责将神经元的输入映射到输出端，旨在帮助网络学习数据中的复杂模式。</p>
<h3 id="为什么要使用激活函数"><a href="#为什么要使用激活函数" class="headerlink" title="为什么要使用激活函数"></a>为什么要使用激活函数</h3><p>如果不用激活函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的线性组合，这种情况就是最原始的感知机（Perceptron）。<br>使用激活函数能够给神经元引入非线性因素，使得神经网络可以任意逼近任何非线性函数，使深层神经网络表达能力更加强大，这样神经网络就可以应用到众多的非线性模型中。  </p>
<h3 id="激活函数的分类"><a href="#激活函数的分类" class="headerlink" title="激活函数的分类"></a>激活函数的分类</h3><ul>
<li>饱和激活函数： sigmoid、tanh…</li>
<li>非饱和激活函数:  ReLU、Leaky Relu、ELU、PReLU、RReLU…</li>
</ul>
<p>Sigmoid函数需要一个实值输入压缩至[0,1]的范围<br>tanh函数需要讲一个实值输入压缩至[-1,1]的范围</p>
<p>相对于饱和激活函数，使用非饱和激活函数的优势在于两点：</p>
<ol>
<li>非饱和激活函数能解决深度神经网络（层数非常多）带来的梯度消失问题</li>
<li>使用非饱和激活函数能加快收敛速度。</li>
</ol>
<h3 id="常见的几种激活函数"><a href="#常见的几种激活函数" class="headerlink" title="常见的几种激活函数"></a>常见的几种激活函数</h3><h4 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h4><p>数学表达式：<br>$$<br>f(x)&#x3D;\dfrac{1}{1+e^{-x}}<br>$$<br>导数表达式：<br>$$<br>f’(x)&#x3D;f(x)(1-f(x))<br>$$<br>Sigmoid函数在历史上曾非常常用，输出值范围为[0,1]之间的实数。但是现在它已经不太受欢迎，实际中很少使用。</p>
<h5 id="什么情况下适合使用Sigmoid"><a href="#什么情况下适合使用Sigmoid" class="headerlink" title="什么情况下适合使用Sigmoid"></a>什么情况下适合使用Sigmoid</h5><ul>
<li>Sigmoid 函数的输出范围是 0 到 1。非常适合作为模型的输出函数用于输出一个0~1范围内的概率值，比如用于表示二分类的类别或者用于表示置信度。</li>
<li>梯度平滑，便于求导，也防止模型训练过程中出现突变的梯度</li>
</ul>
<h5 id="Sigmoid的缺点"><a href="#Sigmoid的缺点" class="headerlink" title="Sigmoid的缺点"></a>Sigmoid的缺点</h5><ul>
<li>容易造成梯度消失。我们从导函数图像中了解到sigmoid的导数都是小于0.25的，那么在进行反向传播的时候，梯度相乘结果会慢慢的趋向于0。这样几乎就没有梯度信号通过神经元传递到前面层的梯度更新中，因此这时前面层的权值几乎没有更新，这就叫梯度消失。除此之外，为了防止饱和，必须对于权重矩阵的初始化特别留意。如果初始化权重过大，可能很多神经元得到一个比较小的梯度，致使神经元不能很好的更新权重提前饱和，神经网络就几乎不学习。</li>
<li>函数输出不是以 0 为中心的，梯度可能就会向特定方向移动，从而降低权重更新的效率</li>
<li>Sigmoid 函数执行指数运算，计算机运行得较慢，比较消耗计算资源。</li>
</ul>
<h4 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h4><p>实际上，Tanh函数是 sigmoid 的变形：<br>$$<br>tanh(x)&#x3D;2sigmoid(2x)-1<br>$$<br>与sigmoid不同的是，tanh是“零为中心”的。因此在实际应用中，tanh会比sigmoid更好一些。但是在饱和神经元的情况下，tanh还是没有解决梯度消失问题。</p>
<h5 id="什么情况下适合用Tanh"><a href="#什么情况下适合用Tanh" class="headerlink" title="什么情况下适合用Tanh"></a>什么情况下适合用Tanh</h5><ul>
<li>tanh 的输出间隔为 1，并且整个函数以 0 为中心，比 sigmoid 函数更好；</li>
<li>在 tanh 图中，负输入将被强映射为负，而零输入被映射为接近零。</li>
</ul>
<h5 id="tanh有哪些缺点"><a href="#tanh有哪些缺点" class="headerlink" title="tanh有哪些缺点"></a>tanh有哪些缺点</h5><ul>
<li>仍然存在梯度饱和的问题</li>
<li>依然进行的是指数运算</li>
</ul>
<h4 id="RELU"><a href="#RELU" class="headerlink" title="RELU"></a>RELU</h4><p>数学表达式：<br>$$<br>f(x)&#x3D;max(0,x)<br>$$</p>
<h5 id="什么情况下适合用RELU"><a href="#什么情况下适合用RELU" class="headerlink" title="什么情况下适合用RELU"></a>什么情况下适合用RELU</h5><ul>
<li>ReLU解决了梯度消失的问题，当输入值为正时，神经元不会饱和</li>
<li>由于ReLU线性、非饱和的性质，在SGD中能够快速收敛</li>
<li>计算复杂度低，不需要进行指数运算</li>
</ul>
<h5 id="RELU有哪些缺点"><a href="#RELU有哪些缺点" class="headerlink" title="RELU有哪些缺点"></a>RELU有哪些缺点</h5><ul>
<li>与Sigmoid一样，其输出不是以0为中心的</li>
<li>Dead ReLU 问题。当输入为负时，梯度为0。这个神经元及之后的神经元梯度永远为0，不再对任何数据有所响应，导致相应参数永远不会被更新<br>训练神经网络的时候，一旦学习率没有设置好，第一次更新权重的时候，输入是负值，那么这个含有ReLU的神经节点就会死亡，再也不会被激活。所以，要设置一个合适的较小的学习率，来降低这种情况的发生</li>
</ul>
<h4 id="Leaky-RELU"><a href="#Leaky-RELU" class="headerlink" title="Leaky RELU"></a>Leaky RELU</h4><h4 id="PRELU"><a href="#PRELU" class="headerlink" title="PRELU"></a>PRELU</h4><h4 id="ELU"><a href="#ELU" class="headerlink" title="ELU"></a>ELU</h4><h4 id="SELU"><a href="#SELU" class="headerlink" title="SELU"></a>SELU</h4><h4 id="Swish"><a href="#Swish" class="headerlink" title="Swish"></a>Swish</h4><h4 id="Mish"><a href="#Mish" class="headerlink" title="Mish"></a>Mish</h4><h4 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h4><p>参考：<a href="https://blog.csdn.net/qq_42691298/article/details/126590726">深度学习中常见的10种激活函数（Activation Function）总结</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>自然伽马与电阻率的关系</title>
    <url>/posts/e9c712a2/</url>
    <content><![CDATA[<p>在测井数据中，自然伽马(Gamma-ray, GR)和电阻率通常呈现一种反比关系，这是因为自然伽马测量的是岩石的放射性，而电阻率测量的是岩石的导电性。以下是一些解释这种关系的因素：</p>
<ol>
<li>岩石成分：自然伽马读数高通常表示岩石中含有更多的放射性元素，如粘土矿物，这些通常具有较低的电阻率。相反，自然伽马读数低通常表示岩石中含有更多的石英或碳酸盐矿物，这些通常具有较高的电阻率。</li>
<li>流体类型：含水的岩石通常具有较低的电阻率，因为水是良好的导电介质。而含油的岩石通常具有较高的电阻率，因为石油是电的不良导体。因此，含油砂岩通常具有低自然伽马和高电阻率的特点。</li>
<li>孔隙度：孔隙度高的岩石通常具有较低的电阻率，因为孔隙中的流体（水或油）有助于电流的流动。而孔隙度低的岩石通常具有较高的电阻率。</li>
<li>矿化度：岩石中的盐分（矿化度）也会影响电阻率。矿化度高的水具有较低的电阻率，因此含有高矿化度水的岩石也会显示出低电阻率。<br>需要注意的是，虽然自然伽马和电阻率之间通常存在反比关系，但这并不是绝对的。其他因素，如岩石的裂缝、矿化度、地层压力等，也可能影响这种关系。因此，在解释测井数据时，应该综合考虑所有可用的测井曲线和地质信息，以获得最准确的地层解释。</li>
</ol>
]]></content>
      <categories>
        <category>测井</category>
      </categories>
      <tags>
        <tag>测井</tag>
        <tag>地质知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Epoch, Batch, Iteration</title>
    <url>/posts/d0538df1/</url>
    <content><![CDATA[<ol>
<li>名词解释</li>
</ol>
<ul>
<li>EPOCH：使用训练集的全部数据对模型进行一次完整的训练，被称之为“一代训练”</li>
<li>BATCH：使用训练集中的一小部分样本对模型权重进行一次反向传播的参数更新，这一小部分样本被称为“一批数据”</li>
<li>Iteration：使用一个Batch数据对模型进行一次参数更新的过程，被称之为“一次训练”</li>
</ul>
<ol start="2">
<li>换算关系<br>$$<br>NumberofBatchs &#x3D; \dfrac{TrainingSetSize}{BatchSize}<br>$$</li>
<li>示例<br>CIFAR10 数据集有 50000 张训练图片，10000 张测试图片。现在选择 Batch Size &#x3D; 256 对模型进行训练。</li>
</ol>
<ul>
<li>每个 Epoch 要训练的图片数量：50000</li>
<li>训练集具有的 Batch 个数：50000 &#x2F; 256 &#x3D; 195 + 1 &#x3D; 196</li>
<li>每个 Epoch 需要完成的 Batch 个数：196</li>
<li>每个 Epoch 具有的 Iteration 个数：196</li>
<li>每个 Epoch 中发生模型权重更新的次数：196</li>
<li>训练 10 代后，模型权重更新的次数：196 * 10 &#x3D; 1960</li>
<li>不同代的训练，其实用的是同一个训练集的数据。第 1 代和第 10 代虽然用的都是训练集的五万张图片，但是对模型的权重更新值却是完全不同的。因为不同代的模型处于代价函数空间上的不同位置，模型的训练代越靠后，越接近谷底，其代价越小。</li>
<li>不同代之间数据要shuffle</li>
</ul>
]]></content>
      <categories>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/posts/dbb714e3/</url>
    <content><![CDATA[<p>参考：</p>
<ol>
<li><a href="https://www.runoob.com/python3/python-urllib.html">Python urllib</a></li>
<li><a href="https://blog.csdn.net/weixin_44758876/article/details/130317803">Python爬虫基础之Selenium详解</a></li>
<li><a href="https://drissionpage.cn/get_start/before_start">DrissionPage</a></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的lambda表达式</title>
    <url>/posts/61bd1ab6/</url>
    <content><![CDATA[<p>与普通函数不同的是，Lambda函数通常不需要使用def关键字去定义，而是在需要时直接使用lambda关键字来创建。Lambda函数可以接受任意数量的参数，但只能返回一个表达式的结果。Lambda表达式的语法形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arguments: expression</span><br></pre></td></tr></table></figure>
<p>其中，arguments为函数的参数列表，expression为函数的返回值表达式。当参数列表为多个参数时，使用逗号分隔即可。Lambda函数返回一个函数对象，这个函数对象可以被调用，也可以被赋值给变量，甚至可以作为其他函数的参数。</p>
<p>下面是一个简单的Lambda表达式示例，它接受两个参数，并返回它们的和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure>
<p>从这个例子中，可以看出Lambda表达式具有非常简洁的语法，可以在一行代码中完成函数的定义和调用。</p>
<h4 id="Python-Lambda表达式的优势"><a href="#Python-Lambda表达式的优势" class="headerlink" title="Python Lambda表达式的优势"></a>Python Lambda表达式的优势</h4><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在Python中，Lambda表达式是一个重要的特性，可以使代码更加简洁、易读。通过Lambda表达式可以实现一些简单的表达式和函数，例如在数学计算、列表过滤、参数传递、返回值等场景中使用。尽管Lambda表达式具有简洁的语法和灵活的使用方法，但是在编写复杂函数时应该慎重使用，考虑到函数的可读性、可维护性等方面。</p>
<p>参考：<a href="https://blog.csdn.net/naer_chongya/article/details/130770037">python lambda表达式表达式详解及应用</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常见特殊注释标记</title>
    <url>/posts/ed0c79e/</url>
    <content><![CDATA[<ol>
<li><code># FIXEME</code>：用于标记需要修复的代码。</li>
<li><code># XXX</code>：用于标记代码中的疑难点或者特别需要注意的地方。</li>
<li><code># HACK</code>：用于标记代码中的“黑客”手段，可能不是最优或者最安全的解决方案。</li>
<li><code># NOTE</code>：用于添加额外的说明或注释。</li>
<li><code># REVIEW</code>：用于标记代码需要复查或评审。</li>
<li><code># OPTIMIZE</code>：用于标记代码可以优化的地方。</li>
<li><code># WARNING</code>：用于标记潜在的危险或需要注意的问题。</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的类和实例</title>
    <url>/posts/38105504/</url>
    <content><![CDATA[<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408">面向对象编程-类和实例</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>glob.glob()用法</title>
    <url>/posts/5757d1a1/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/liulanba/article/details/121802892?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172007720916800225544348%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=172007720916800225544348&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-121802892-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=python%E7%9A%84glob.glob&spm=1018.2226.3001.4187">python glob.glob()</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>huggingface修改cache存放位置</title>
    <url>/posts/1d86426c/</url>
    <content><![CDATA[<h4 id="更改python文件（以conda为例）"><a href="#更改python文件（以conda为例）" class="headerlink" title="更改python文件（以conda为例）"></a>更改python文件（以conda为例）</h4><p>在放环境的<code>envs</code>中找到使用huggingface的环境，在<code>\Lib\site-packages\huggingface_hub</code>文件夹中找到<code>constants.py</code>。<strong>备份</strong>后做如下修改：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># default cache</span></span><br><span class="line"><span class="comment"># default_home = os.path.join(os.path.expanduser(&quot;~&quot;), &quot;.cache&quot;)</span></span><br><span class="line">default_home = os.path.join(os.path.expanduser(<span class="string">&quot;D:\CodeApps\HuggingFace&quot;</span>), <span class="string">&quot;.cache&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h4><p>已经更改了<code>constants.py</code>同样建议使用huggingface时，使用以下命令修改系统环境</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;HF_ENDPOINT&quot;</span>] = <span class="string">&quot;https://hf-mirror.com&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>os.environ</code>是一个表示环境变量的字典。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>保证有一个副本<code>constants - 副本.py</code>在<code>\Lib\site-packages\huggingface_hub</code>文件夹中，以便出错时可以恢复。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>huggingface</tag>
      </tags>
  </entry>
  <entry>
    <title>print的end和sep用法</title>
    <url>/posts/dd1510ad/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/fox_kang/article/details/134670586?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172007704116800226544445%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172007704116800226544445&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-134670586-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=print%E7%9A%84sep&spm=1018.2226.3001.4187">python：print函数中end、sep参数的作用解释带解释实例（让你一看就明白，一看就会使用）</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络（CNN）</title>
    <url>/posts/c9b25c16/</url>
    <content><![CDATA[<h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><h5 id="conv1d"><a href="#conv1d" class="headerlink" title="conv1d"></a>conv1d</h5><p><code>conv1d</code>卷积运算的输出公式为：</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>学习率调度器</title>
    <url>/posts/175df8fb/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/qq_40206371/article/details/119910592">pytorch笔记：调整学习率（torch.optim.lr_scheduler）</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>快速开始PyTorch</title>
    <url>/posts/4b503ff2/</url>
    <content><![CDATA[<p>教程：<a href="https://bohrium.dp.tech/notebooks/4914094074?utm_source=bilibili001">快速开始 PyTorch｜使用 Python 建立深度学习模型</a></p>
]]></content>
      <categories>
        <category>PyTorch</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformers学习笔记</title>
    <url>/posts/90df7d6b/</url>
    <content><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://transformers.run/">Transformers快速入门</a></li>
<li>手把手带你实战HuggingFace Transformers：<a href="https://www.bilibili.com/video/BV1ma4y1g791/?spm_id_from=333.788&vd_source=251b9f270c90a8149c74eb986759892c">视频教程</a>，<a href="https://github.com/zyds/transformers-code">代码</a></li>
</ol>
]]></content>
      <categories>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>Transformers</tag>
      </tags>
  </entry>
  <entry>
    <title>损失和损失函数</title>
    <url>/posts/2c8ab6f2/</url>
    <content><![CDATA[<p>参考：<a href="https://machinelearningmastery.com/loss-and-loss-functions-for-training-deep-learning-neural-networks/">Loss and Loss Functions for Training Deep Learning Neural Networks</a><br><a href="https://www.zhihu.com/question/264189719/answer/932262940">如何理解随机梯度下降（stochastic gradient descent，SGD）？</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>常见距离公式</title>
    <url>/posts/5ad85a79/</url>
    <content><![CDATA[<h4 id="1-欧氏距离"><a href="#1-欧氏距离" class="headerlink" title="1.欧氏距离"></a>1.欧氏距离</h4><p>欧几里得度量（euclidean metric）（也称欧氏距离）是一个通常采用的距离定义，指在m维空间中两个点之间的真实距离，或者向量的自然长度（即该点到原点的距离）。在二维和三维空间中的欧氏距离就是两点之间的实际距离。<br>二维空间公式：<br>$$<br>\rho&#x3D;\sqrt{(x_2-x_1)^2+(y_2-y_1)^2},<br>|X|&#x3D;\sqrt{x_2^2+y_2^2}<br>$$<br>其中\rho为点(x2,y2)与点(x1,y1)之间的欧氏距离；|X|为点(x2,y2)到远点的欧氏距离。<br>三维空间公式：<br>$$<br>\rho&#x3D;\sqrt{(x2-x1)^2+(y2-y1)^2+(z2-z1)^2},<br>|X|&#x3D;\sqrt{x_2^2+y_2^2+z_2^2}<br>$$<br>n维空间的公式：<br>$$<br>d(x,y)&#x3D;\sqrt{(x1-y1)^2+(x2-y2)^2+\cdots+(x_n-y_n)^2}&#x3D;\sqrt{\sum_{i&#x3D;1}^n{(x_i-y_i)^2}}<br>$$</p>
<p>参考：<a href="https://blog.csdn.net/weixin_43961909/article/details/132388832">机器学习—常见的距离公式</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>早停机制和正则化</title>
    <url>/posts/3664336/</url>
    <content><![CDATA[<p>参考：<a href="https://zhuanlan.zhihu.com/p/471721396">线性代数及其应用——“早停止”与“L2正则”的关系</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>正则化</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习的优化器</title>
    <url>/posts/3520d892/</url>
    <content><![CDATA[<p>参考：</p>
<ul>
<li>优化器公式<a href="https://blog.csdn.net/weixin_42045968/article/details/132917401">常见优化器总结</a></li>
<li><a href="https://blog.csdn.net/xian0710830114/article/details/126551268">Pytorch优化器全总结（一）SGD、ASGD、Rprop、Adagrad</a></li>
<li><a href="https://blog.csdn.net/xian0710830114/article/details/126882921">Pytorch优化器全总结（二）Adadelta、RMSprop、Adam、Adamax、AdamW、NAdam、SparseAdam（重置版）</a></li>
<li><a href="https://blog.csdn.net/xian0710830114/article/details/128419401">Pytorch优化器全总结（三）牛顿法、BFGS、L-BFGS 含代码</a></li>
<li><a href="https://blog.csdn.net/xian0710830114/article/details/128658682">Pytorch优化器全总结（四）常用优化器性能对比 含代码</a></li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>huggingface_pub换源</title>
    <url>/posts/a23ca50e/</url>
    <content><![CDATA[<h4 id="更改python文件（以conda为例）"><a href="#更改python文件（以conda为例）" class="headerlink" title="更改python文件（以conda为例）"></a>更改python文件（以conda为例）</h4><p>在放环境的<code>envs</code>中找到使用huggingface的环境，在<code>\Lib\site-packages\huggingface_hub</code>文件夹中找到<code>constants.py</code>。<strong>备份</strong>后做如下修改：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HUGGINGFACE_CO_URL_HOME = &quot;https://huggingface.co/&quot;</span></span><br><span class="line">HUGGINGFACE_CO_URL_HOME = <span class="string">&quot;https://hf-mirror.com/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># _HF_DEFAULT_ENDPOINT = &quot;https://huggingface.co&quot;</span></span><br><span class="line">_HF_DEFAULT_ENDPOINT = <span class="string">&quot;https://hf-mirror.com&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h4><p>在使用huggingface时，使用以下命令修改系统环境</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;HF_ENDPOINT&quot;</span>] = <span class="string">&quot;https://hf-mirror.com&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>os.environ</code>是一个表示环境变量的字典。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>保证有一个副本在<code>\Lib\site-packages\huggingface_hub</code>文件夹中，以便出错时可以恢复。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>huggingface</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Git报错fatal：unable to connect to github.com</title>
    <url>/posts/495efddd/</url>
    <content><![CDATA[<p>运行<code>git clone git://github.com/scikit-learn-contrib/py-earth.git</code><br>报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cloning into <span class="string">&#x27;py-earth&#x27;</span>...</span><br><span class="line">fatal: unable to connect to github.com:</span><br><span class="line">github.com[0: 20.205.243.166]: errno=Unknown error</span><br></pre></td></tr></table></figure>
<p>经查，这个问题是由于Git 协议通常使用端口 9418，但是有些网络环境可能会限制对此端口的访问，或者直接阻止使用 Git 协议。因此，我们需要将git:&#x2F;&#x2F;github.com&#x2F;替换为<a href="https://github.com/%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%8F%AF%E4%BB%A5%E7%A1%AE%E4%BF%9D%E4%B8%8E">https://github.com/，这样可以确保与</a> GitHub 进行通信。</p>
<p>可以执行下面的命令： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global url.https://github.com/.insteadOf git://github.com/</span><br></pre></td></tr></table></figure>
<p>再执行git clone就可以顺利通过</p>
<p><strong>补充</strong>：这条指令用于改变 Git 与 GitHub 之间的传输协议。用于提高兼容性，确保在各种网络环境中都可以访问 GitHub 存储库。如果您不受网络限制，通常没有必要执行这种替换操作，因为 Git 默认会使用 HTTPS 协议来访问 GitHub 存储库。</p>
<p>参考：<a href="https://blog.csdn.net/SeaguII/article/details/132814049">Git报错fatal unable to connect to github.com: github.com[0: 20.205.243.166]: errno&#x3D;unknown error的解决方法</a></p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决TypeError：DataFrame object cannot be interpreted as an integer</title>
    <url>/posts/8297640f/</url>
    <content><![CDATA[<p>报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">Cell In[25], line 32</span><br><span class="line">     29 val_dataset = CustomDateset(val_features, val_targets)</span><br><span class="line">     30 <span class="comment"># print(train_dataset.features)</span></span><br><span class="line">---&gt; 32 train_loader = DataLoader(train_dataset, batch_size=200, shuffle=True)</span><br><span class="line">     33 val_loader = DataLoader(val_dataset, batch_size=200)</span><br><span class="line">     34 <span class="built_in">print</span>(train_loader.dataset)</span><br><span class="line"></span><br><span class="line">File c:\Users\Xian04\.conda\envs\zrf38\lib\site-packages\torch\utils\data\dataloader.py:350, <span class="keyword">in</span> DataLoader.__init__(self, dataset, batch_size, shuffle, sampler, batch_sampler, num_workers, collate_fn, pin_memory, drop_last, <span class="built_in">timeout</span>, worker_init_fn, multiprocessing_context, generator, prefetch_factor, persistent_workers, pin_memory_device)</span><br><span class="line">    348 <span class="keyword">else</span>:  <span class="comment"># map-style</span></span><br><span class="line">    349     <span class="keyword">if</span> shuffle:</span><br><span class="line">--&gt; 350         sampler = RandomSampler(dataset, generator=generator)  <span class="comment"># type: ignore[arg-type]</span></span><br><span class="line">    351     <span class="keyword">else</span>:</span><br><span class="line">    352         sampler = SequentialSampler(dataset)  <span class="comment"># type: ignore[arg-type]</span></span><br><span class="line"></span><br><span class="line">File c:\Users\Xian04\.conda\envs\zrf38\lib\site-packages\torch\utils\data\sampler.py:142, <span class="keyword">in</span> RandomSampler.__init__(self, data_source, replacement, num_samples, generator)</span><br><span class="line">    139 <span class="keyword">if</span> not isinstance(self.replacement, bool):</span><br><span class="line">    140     raise TypeError(f<span class="string">&quot;replacement should be a boolean value, but got replacement=&#123;self.replacement&#125;&quot;</span>)</span><br><span class="line">--&gt; 142 <span class="keyword">if</span> not isinstance(self.num_samples, int) or self.num_samples &lt;= 0:</span><br><span class="line">    143     raise ValueError(f<span class="string">&quot;num_samples should be a positive integer value, but got num_samples=&#123;self.num_samples&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">File c:\Users\Xian04\.conda\envs\zrf38\lib\site-packages\torch\utils\data\sampler.py:149, <span class="keyword">in</span> RandomSampler.num_samples(self)</span><br><span class="line">    145 @property</span><br><span class="line">    146 def num_samples(self) -&gt; int:</span><br><span class="line">...</span><br><span class="line">    148     <span class="keyword">if</span> self._num_samples is None:</span><br><span class="line">--&gt; 149         <span class="built_in">return</span> len(self.data_source)</span><br><span class="line">    150     <span class="built_in">return</span> self._num_samples</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">&#x27;DataFrame&#x27;</span> object cannot be interpreted as an <span class="built_in">integer</span></span><br></pre></td></tr></table></figure>

<p>原因：自定义数据集的__len__返回值错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDateset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, features, targets</span>):</span><br><span class="line">        <span class="variable language_">self</span>.features = features</span><br><span class="line">        <span class="variable language_">self</span>.targets = targets</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.targets</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getItem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.features[idx], <span class="variable language_">self</span>.targets[idx]</span><br></pre></td></tr></table></figure>
<p>其中<code>__len__</code>返回值应该修改为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDateset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, features, targets</span>):</span><br><span class="line">        <span class="variable language_">self</span>.features = features</span><br><span class="line">        <span class="variable language_">self</span>.targets = targets</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.targets)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.features[idx], <span class="variable language_">self</span>.targets[idx]</span><br></pre></td></tr></table></figure>
<p><code>__len__</code> 方法应该返回数据集的长度，即样本的数量。在这个方法中，应该返回<code>features</code>或<code>targets</code>的长度，而不是<code>self.targets</code>本身，因为它可能是一个数组或列表，而不是一个整数。</p>
<p>另外，<code>__getItem__</code>方法名拼写错误，应该是<code>__getitem__</code>。在Python中，特殊方法如<code>__getitem__</code>是有严格命名规则的，拼写错误会导致方法不被识别。</p>
<p>写在后面：数据集的自定义是灵活的，在初学时应该有意识地观察和学习别人是如何定义数据集的，因为它的处理方式完全服务于项目，而不是固定的、死板的。</p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ValueError：object too deep for desired array</title>
    <url>/posts/bde838a1/</url>
    <content><![CDATA[<p>报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">Cell In[81], line 8</span><br><span class="line">      2 X1 = data[[<span class="string">&#x27;GR&#x27;</span>]].values</span><br><span class="line">      3 X2 = data[[<span class="string">&#x27;AC&#x27;</span>]].values</span><br><span class="line">----&gt; 8 <span class="built_in">print</span>(<span class="string">&quot;X1 F(15,30)分布检验：\n&quot;</span>, stats.kstest(X1, cdf=<span class="string">&quot;f&quot;</span>, args=(15,30)))</span><br><span class="line"></span><br><span class="line">File c:\Users\Xian04\.conda\envs\zrf38\lib\site-packages\scipy\_lib\_util.py:700, <span class="keyword">in</span> _rename_parameter.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)</span><br><span class="line">    698         raise TypeError(message)</span><br><span class="line">    699     kwargs[new_name] = kwargs.pop(old_name)</span><br><span class="line">--&gt; 700 <span class="built_in">return</span> fun(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">File c:\Users\Xian04\.conda\envs\zrf38\lib\site-packages\scipy\stats\_stats_py.py:8378, <span class="keyword">in</span> kstest(rvs, cdf, args, N, alternative, method)</span><br><span class="line">   8376 xvals, yvals, cdf = _parse_kstest_args(rvs, cdf, args, N)</span><br><span class="line">   8377 <span class="keyword">if</span> cdf:</span><br><span class="line">-&gt; 8378     <span class="built_in">return</span> ks_1samp(xvals, cdf, args=args, alternative=alternative,</span><br><span class="line">   8379                     method=method)</span><br><span class="line">   8380 <span class="built_in">return</span> ks_2samp(xvals, yvals, alternative=alternative, method=method)</span><br><span class="line"></span><br><span class="line">File c:\Users\Xian04\.conda\envs\zrf38\lib\site-packages\scipy\_lib\_util.py:700, <span class="keyword">in</span> _rename_parameter.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)</span><br><span class="line">    698         raise TypeError(message)</span><br><span class="line">    699     kwargs[new_name] = kwargs.pop(old_name)</span><br><span class="line">--&gt; 700 <span class="built_in">return</span> fun(*args, **kwargs)</span><br><span class="line">...</span><br><span class="line">   7580 amax = dplus.argmax()</span><br><span class="line">-&gt; 7581 loc_max = x[amax]</span><br><span class="line">   7582 <span class="built_in">return</span> (dplus[amax], loc_max)</span><br><span class="line"></span><br><span class="line">IndexError: index 378863 is out of bounds <span class="keyword">for</span> axis 0 with size 1754</span><br></pre></td></tr></table></figure>

<p>原因：输入<code>stats.kstest</code>函数的数据形状不对，<code>stats.kstest</code>期望接收一维数组。<br>打印从Dataframe获取的X1输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[52.81700134],</span><br><span class="line">       [50.24700165],</span><br><span class="line">       [46.37599945],</span><br><span class="line">       ...,</span><br><span class="line">       [27.92700005],</span><br><span class="line">       [26.19400024],</span><br><span class="line">       [25.26199913]])</span><br></pre></td></tr></table></figure>
<p>使用<code>ravel()</code>函数再输出X1，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([52.81700134, 50.24700165, 46.37599945, ..., 27.92700005,</span><br><span class="line">       26.19400024, 25.26199913])</span><br></pre></td></tr></table></figure>
<p>分别对两个X1使用<code>type()</code>均为<code>numpy.ndarray</code>；而分别对两个X1使用<code>X1.shape</code>，结果分别为(1754,1)和(1754,)；因此<code>ravel()</code>的作用是将二维数组转换为一维数组。</p>
<p>补充：<code>shape</code>是<code>numpy</code>的一个属性，同时也是<code>Dataframe</code>的一个属性，因为它是属性而不是方法，因此在使用时不需要在<code>shape</code>后面加上括号<code>()</code></p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>通过cuda查看显卡信息</title>
    <url>/posts/dc74b75c/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/qq_50001789/article/details/136219629">PyTorch学习笔记：cuda方法——查看显卡信息</a><br>提示：最好用管理员下的cmd（或Anaconda Prompt），直接使用Python命令行，不会担心权限问题。</p>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
</search>
